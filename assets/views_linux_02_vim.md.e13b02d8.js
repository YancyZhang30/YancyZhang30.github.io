import{_ as e,v as i,b as a,R as o}from"./chunks/framework.caa0fbaf.js";const u=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[{"level":2,"title":"vim","slug":"vim","link":"#vim","children":[]},{"level":2,"title":"vim三种模式","slug":"vim三种模式","link":"#vim三种模式","children":[{"level":3,"title":"命令模式","slug":"命令模式","link":"#命令模式","children":[]},{"level":3,"title":"输入模式","slug":"输入模式","link":"#输入模式","children":[]},{"level":3,"title":"命令行模式/底线命令模式","slug":"命令行模式-底线命令模式","link":"#命令行模式-底线命令模式","children":[]}]},{"level":2,"title":"高级用法","slug":"高级用法","link":"#高级用法","children":[]}],"relativePath":"views/linux/02_vim.md","filePath":"views/linux/02_vim.md","lastUpdated":1691830962000}'),l={name:"views/linux/02_vim.md"},t=o('<h2 id="vim" tabindex="-1">vim <a class="header-anchor" href="#vim" aria-label="Permalink to &quot;vim&quot;">​</a></h2><p>所有的 Unix Like 系统都会内建 vi 文书编辑器，其他的文书编辑器则不一定会存在。</p><p>但是目前我们使用比较多的是 vim 编辑器。</p><p>Vim 是从 vi 发展出来的一个文本编辑器。代码补全、编译及错误跳转等方便编程的功能特别丰富，在程序员中被广泛使用。</p><p>简单的来说， vi 是老式的字处理器，不过功能已经很齐全了，但是还是有可以进步的地方。 vim 则可以说是程序开发者的一项很好用的工具。</p><p>连 vim 的官方网站 (<a href="https://www.vim.org/" target="_blank" rel="noreferrer">https://www.vim.org/</a>) 自己也说 vim 是一个程序开发工具而不是文字处理软件。</p><p><strong>VIM键盘图</strong></p><p><img src="https://www.runoob.com/wp-content/uploads/2015/10/vi-vim-cheat-sheet-sch.gif" alt="VIM 键盘图"></p><h2 id="vim三种模式" tabindex="-1">vim三种模式 <a class="header-anchor" href="#vim三种模式" aria-label="Permalink to &quot;vim三种模式&quot;">​</a></h2><p>基本上 vi/vim 共分为三种模式，命令模式（Command Mode）、输入模式（Insert Mode）和命令行模式（Command-Line Mode）。</p><h3 id="命令模式" tabindex="-1">命令模式 <a class="header-anchor" href="#命令模式" aria-label="Permalink to &quot;命令模式&quot;">​</a></h3><p><strong>Vim 使用的选项说明</strong></p><p><code>vim filename</code> 打开或新建一个文件，并将光标置于第一行的首部</p><p><code>vim -r filename</code> 恢复上次 vim 打开时崩溃的文件</p><p><code>vim -R filename</code> 把指定的文件以只读方式放入 Vim 编辑器中</p><p><code>vim + filename</code> 打开文件，并将光标置于最后一行的首部</p><p><code>vi +n filename</code> 打开文件，并将光标置于第 n 行的首部</p><p><code>vi +/pattern filename</code> 打幵文件，并将光标置于第一个与 pattern 匹配的位置</p><p><code>vi -c command filename</code> 在对文件进行编辑前，先执行指定的命令</p><p>使用vim打开文件后，默认就是命令模式，此时我们输入的字符并不会修改文件内容，而是会被识别成命令。</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">root@itxdl </span><span style="color:#89DDFF;">~]</span><span style="color:#A6ACCD;"># vim /test/vi.test</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>刚打开文件时 Vim 处于命令模式，此时文件的下方会显示文件的一些信息，包括文件的总行数和字符数，以及当前光标所在的位置等。</p><p>命令模式只有一些最基本的命令，因此仍要依靠<code>底线命令行模式</code>输入更多命令。</p><h3 id="输入模式" tabindex="-1">输入模式 <a class="header-anchor" href="#输入模式" aria-label="Permalink to &quot;输入模式&quot;">​</a></h3><p>我们一开始是进入的命令模式，如果想要编辑文本的内容，就需要从命令模式进入输入模式。</p><p>从命令模式进入输入模式进行编辑，可以按下 <code>I、i、O、o、A、a </code>等键来完成，使用不同的键，光标所处的位置不同。</p><p><strong>快捷键</strong></p><p><code>i</code> 在当前光标所在位置插入随后输入的文本，光标后的文本相应向右移动</p><p><code>I</code> 在光标所在行的行首插入随后输入的文本，行首是该行的第一个非空白字符，相当于光标移动到行首执行 i 命令</p><p><code>o</code> 在光标所在行的下面插入新的一行。光标停在空行首，等待输入文本</p><p><code>O</code>（大写） 在光标所在行的上面插入新的一行。光标停在空行的行首，等待输入文本</p><p><code>a</code> 在当前光标所在位置之后插入随后输入的文本</p><p><code>A</code> 在光标所在行的行尾插入随后输入的文本，相当于光标移动到行尾再执行 a 命令</p><p>在输入模式下按下<code>Esc</code>键，即可推出输入模式，进入命令模式。</p><h3 id="命令行模式-底线命令模式" tabindex="-1">命令行模式/底线命令模式 <a class="header-anchor" href="#命令行模式-底线命令模式" aria-label="Permalink to &quot;命令行模式/底线命令模式&quot;">​</a></h3><p>在命令模式下按下<code> :（英文冒号）</code>就进入了底线命令模式。</p><p>底线命令模式可以输入单个或多个字符的命令，可用的命令非常多。</p><p>在底线命令模式中，基本的命令有：</p><ul><li>w：保存文件。</li><li>q：退出 Vim 编辑器。</li><li>wq：保存文件并退出 Vim 编辑器。</li><li>q!：强制退出Vim编辑器，不保存修改。</li></ul><p><img src="https://www.runoob.com/wp-content/uploads/2014/07/vim-vi-workmodel.png" alt="vim 三模式切换"></p><h2 id="高级用法" tabindex="-1">高级用法 <a class="header-anchor" href="#高级用法" aria-label="Permalink to &quot;高级用法&quot;">​</a></h2>',41),p=[t];function n(s,r,d,c,m,v){return i(),a("div",null,p)}const b=e(l,[["render",n]]);export{u as __pageData,b as default};
