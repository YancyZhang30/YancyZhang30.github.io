import{_ as s,v as a,b as n,R as l}from"./chunks/framework.caa0fbaf.js";const b=JSON.parse('{"title":"JS+运算规则","description":"","frontmatter":{},"headers":[],"relativePath":"1-前端开发/2-JavaScript/6-加法运算符类型转换.md","filePath":"1-前端开发/2-JavaScript/6-加法运算符类型转换.md","lastUpdated":1697631288000}'),p={name:"1-前端开发/2-JavaScript/6-加法运算符类型转换.md"},e=l(`<h1 id="js-运算规则" tabindex="-1">JS+运算规则 <a class="header-anchor" href="#js-运算规则" aria-label="Permalink to &quot;JS+运算规则&quot;">​</a></h1><h2 id="用法" tabindex="-1">用法 <a class="header-anchor" href="#用法" aria-label="Permalink to &quot;用法&quot;">​</a></h2><p>（1）正号：将其他类型强制转换为数字类型。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;">x</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>（2）加法运算： 加法运算又分为两种，数字相加的二元运算和字符串连接运算。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">a </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">s1 </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">2</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">s2 </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">1</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">2</span><span style="color:#89DDFF;">&#39;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>但是当加号两边既不是数字，也不是字符串时，也不会报错，这就涉及到了隐式类型转换。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>首先将加号两边都转换为原始数据类型。</p><p>如果其中有一个转换结果为string类型，使用ToString强制转换另一个运算元，然后做字符串拼接操作；否则就是都使用ToNumber强制转换为数字作加法运算。</p></div><h2 id="toprimitive运算" tabindex="-1">ToPrimitive运算 <a class="header-anchor" href="#toprimitive运算" aria-label="Permalink to &quot;ToPrimitive运算&quot;">​</a></h2><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">ToPrimitive</span><span style="color:#A6ACCD;">(input</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> PreferredType)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ul><li>input是调用的对象</li><li>PreferredType是期望返回的结果类型</li></ul><ol><li><p>判断input是否是对象，如果不是直接return input</p></li><li><p>根据PreferredType定义hint，hint的取值一共有三种情况：&#39;default&#39;（PreferredType为空）, &#39;number&#39;（PreferredType是number）, &#39;string&#39;（PreferredType是string）</p></li><li><p>判断该对象是否有Symbol.toPrimitive方法, 如果有则传入参数hint进行调用，若执行结果是基本类型，则return该结果，否则抛出TypeError。</p></li><li><p>如果hint是&#39;default&#39;,则改为&#39;number&#39;。<code>也就是说默认是按&#39;number&#39;</code>。</p></li></ol><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>除了Date对象和Symbol对象。Date对象转换时hint参数是String。Symbol对象进行类型转换会抛出异常。</p></div><ol start="5"><li>执行<code>OrdinaryToPrimitive</code>运算</li></ol><p>如果hint是&#39;string&#39;，调用toString方法，得到的是原始数据类型，返回该值；否则调用valueOf方法，如果得到的是原始数据类型，返回该值；否则抛出异常</p><p>如果hint是&#39;number&#39;，则相反；先调用valueOf方法，得到的是原始数据类型，返回该值；否则调用toString方法，如果得到的是原始数据类型，返回该值；否则抛出异常。</p><ul><li><p>js中加法操作，参数PreferredType一般是Default</p></li><li><p>+正号操作，参数PreferredType一般是Number</p></li></ul><h2 id="valueof和tostring方法" tabindex="-1">valueOf和toString方法 <a class="header-anchor" href="#valueof和tostring方法" aria-label="Permalink to &quot;valueOf和toString方法&quot;">​</a></h2><p>（1）对于Object</p><p>valueOf：返回对象本身</p><p>toString：返回的是&quot;[object type]&quot;字符串，&quot;type&quot;指的是对象本身的类型识别。例如Object对象返回&quot;[object Object]&quot;，Math对象返回&quot;[object Math]&quot;</p><p>（2）对于Array</p><p>valueOf：返回本身</p><p>toString方法返回值: 相当于用数组值调用join(&#39;,&#39;)所返回的字符串。例如：[1,2,3].toString()会是&quot;1,2,3&quot;</p><p>（3）对于Number</p><p>valueOf：返回本身</p><p>toString：转换为字符串类型时的字符串值。可以传一个参数，决定转换为字符串时的<code>进制</code>(2、8、16)</p><p>（4）对于String</p><p>valueOf：返回本身</p><p>toString：返回本身</p><p>（4）对于Boolean</p><p>valueOf：返回本身</p><p>toString：返回&quot;true&quot;或&quot;false&quot;字符串</p><h2 id="示例" tabindex="-1">示例 <a class="header-anchor" href="#示例" aria-label="Permalink to &quot;示例&quot;">​</a></h2><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">[] </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">[]</span><span style="color:#82AAFF;">先调用valueOf</span><span style="color:#A6ACCD;">()返回的是本身</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">继续调用toString方法，返回</span><span style="color:#89DDFF;">&quot;&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">{}</span><span style="color:#A6ACCD;">调用valueOf返回本身，调用toString方法，返回</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">[object Object]</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">所以</span><span style="color:#89DDFF;">&quot;&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">[object Object]</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">，进行字符串拼接操作。打印结果为</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">[object Object]</span><span style="color:#89DDFF;">&quot;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">{}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> []</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">{}</span><span style="color:#A6ACCD;">有两种常见的用途（</span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;">）</span><span style="color:#82AAFF;">对象的定义</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">2</span><span style="color:#A6ACCD;">)区块语句。</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">这里的</span><span style="color:#89DDFF;">{}</span><span style="color:#A6ACCD;">会被浏览器认为是区块语句而不是对象字面量，所以</span><span style="color:#89DDFF;">{}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> [] 相当于 </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;">[]，</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">相当于把[]强制转换成数字，转换结果为0。打印结果为0</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">{}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">{}</span><span style="color:#A6ACCD;">调用valueOf返回本身，调用toString方法，返回</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">[object Object]</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">所以</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">[object Object]</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">[object Object]</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">，进行字符串拼接操作。</span></span>
<span class="line"><span style="color:#A6ACCD;">打印结果为</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">[object Object][object Object]</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">。</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">火狐浏览器除外，火狐浏览器会把第一个</span><span style="color:#89DDFF;">{}</span><span style="color:#A6ACCD;">当作区块语句，相当于</span><span style="color:#89DDFF;">+{}</span><span style="color:#A6ACCD;">，</span></span>
<span class="line"><span style="color:#A6ACCD;">转化为</span><span style="color:#89DDFF;">+</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">[object Object]</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">转为数字结果为NaN。</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">[] </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> []</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">[]</span><span style="color:#82AAFF;">先调用valueOf</span><span style="color:#A6ACCD;">()返回的是本身</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">继续调用toString方法，返回</span><span style="color:#89DDFF;">&quot;&quot;</span><span style="color:#A6ACCD;">。</span></span>
<span class="line"><span style="color:#A6ACCD;">相当于</span><span style="color:#89DDFF;">&quot;&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;&quot;</span><span style="color:#A6ACCD;">。打印结果为</span><span style="color:#89DDFF;">&quot;&quot;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div>`,38),o=[e];function t(r,c,i,D,u,y){return a(),n("div",null,o)}const F=s(p,[["render",t]]);export{b as __pageData,F as default};
