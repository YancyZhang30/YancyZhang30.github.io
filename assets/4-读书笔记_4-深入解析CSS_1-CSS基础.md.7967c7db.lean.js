import{_ as s,v as a,b as n,R as l}from"./chunks/framework.caa0fbaf.js";const C=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"4-读书笔记/4-深入解析CSS/1-CSS基础.md","filePath":"4-读书笔记/4-深入解析CSS/1-CSS基础.md","lastUpdated":1719037263000}'),e={name:"4-读书笔记/4-深入解析CSS/1-CSS基础.md"},p=l(`<h2 id="层叠" tabindex="-1">层叠 <a class="header-anchor" href="#层叠" aria-label="Permalink to &quot;层叠&quot;">​</a></h2><p>CSS层叠规则指的是当多个CSS规则应用于同一元素时，决定哪些规则将被应用的一套规则。这些规则按优先级排序，通常从高到低包括以下几个方面：</p><ol><li><p>重要性（Importance）：通过!important声明的样式具有最高优先级，会覆盖其他样式。</p></li><li><p>特殊性（Specificity）：指选择器的具体程度。通常来说，ID选择器的特殊性大于类选择器和标签选择器的特殊性，而内联样式的特殊性最大。</p></li><li><p>源代码次序（Source Order）：如果两条规则具有相同的重要性和特殊性，则最后出现的规则将会覆盖之前的规则。</p></li></ol><p>通过理解这些层叠规则，开发人员可以更好地控制各种样式规则的应用顺序，确保所期望的样式能够正确地被应用到页面元素上。</p><p>叠加计算： 0 0 0 0 四位分别代表：!important、ID选择器、类选择器、标签选择器</p><p>行内样式和!important都具有最高优先级，但是!important的优先级比行内样式更高，因此!important声明的样式会覆盖行内样式。</p><h2 id="继承" tabindex="-1">继承 <a class="header-anchor" href="#继承" aria-label="Permalink to &quot;继承&quot;">​</a></h2><p>如果一个元素的某个属性没有层叠值，则可能会继承某个祖先元素的值。</p><p>比如通常会给<code>&lt;body&gt;</code>元素加上font-family，里面的所有祖先元素都会继承这个字体，就不必给页面的每个元素明确指定字体了。</p><p>但不是所有的属性都能被继承。默认情况下，只有特定的一些属性能被继承，通常是我们希望被继承的那些。它们主要是跟<code>文本相关</code>的属性：color、font、font-family、font-size、font-weight、font-variant、font-style、line-height、letter-spacing、text-align、text-indent、text-transform、white-space以及word-spacing。</p><p>还有一些其他的属性也可以被继承，比如列表属性：list-style、list-style-type、list-style-position以及list-style-image。表格的边框属性border-collapse和border-spacing也能被继承。注意，这些属性控制的是表格的边框行为，而不是常用于指定非表格元素边框的属性。（恐怕没人希望将一个<code>&lt;div&gt;</code>的边框传递到每一个后代元素。）</p><h3 id="特殊值" tabindex="-1">特殊值 <a class="header-anchor" href="#特殊值" aria-label="Permalink to &quot;特殊值&quot;">​</a></h3><p>我们想用继承代替一个层叠值。这时候可以用inherit关键字。可以用它来覆盖另一个值，这样该元素就会继承其父元素的值。</p><p>有时，你需要撤销作用于某个元素的样式。这可以用initial关键字来实现。每一个CSS属性都有初始（默认）值。如果将initial值赋给某个属性，那么就会有效地将其重置为默认值，这种操作相当于硬复位了该值。</p><p>但是要注意，auto不是所有属性的默认值，对很多属性来说甚至不是合法的值。比如border-width: auto和padding: auto是非法的，因此不会生效。可以花点时间研究一下这些属性的初始值，不过使用initial更简单。</p><blockquote><p>说明声明display: initial等价于display: inline。不管应用于哪种类型的元素，它都不会等于display: block。这是因为initial重置为<code>属性的初始值</code>，而不是<code>元素的初始值</code>。inline才是display属性的初始值。</p></blockquote><p>以下是一些常见CSS属性的默认值：</p><ul><li>display: 默认值为inline（行内元素的默认显示方式）或block（块级元素的默认显示方式）。</li><li>position: 默认值为static。</li><li>color: 默认值为继承自父元素的颜色，通常为黑色。</li><li>font-size: 默认值通常为浏览器的默认设置，一般为16px。</li><li>margin和padding: 默认值为0。</li><li>text-align: 默认值为left。</li><li>float: 默认值为none。</li><li>border: 默认值为medium none color（宽度为medium、无样式、颜色为继承自父元素的颜色）</li></ul><h2 id="属性简写" tabindex="-1">属性简写 <a class="header-anchor" href="#属性简写" aria-label="Permalink to &quot;属性简写&quot;">​</a></h2><p>上、右、左、下 上下、左右 上、左右、下</p><p>通常情况下，建议按照以下顺序书写<code>&lt;a&gt;</code>标签的伪类：</p><ol><li>链接未被访问前的状态（:link）</li><li>链接已被访问后的状态（:visited）</li><li>鼠标悬停在链接上时的状态（:hover）</li><li>链接获得焦点时的状态（:focus）</li><li>链接被激活时的状态（:active）</li></ol><h2 id="相对单位" tabindex="-1">相对单位 <a class="header-anchor" href="#相对单位" aria-label="Permalink to &quot;相对单位&quot;">​</a></h2><p>rem是相对于html元素的字体大小的，而em是相对于父元素的字体大小的。</p><p>❑vh：视口高度的1/100。 ❑ vw：视口宽度的1/100。 ❑ vmin：视口宽、高中较小的一方的1/100（IE9中叫vm，而不是vmin）。 ❑ vmax：视口宽、高中较大的一方的1/100（本书写作时IE和Edge均不支持vmax）。</p><h2 id="css变量" tabindex="-1">CSS变量 <a class="header-anchor" href="#css变量" aria-label="Permalink to &quot;CSS变量&quot;">​</a></h2><div class="language-css line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">:</span><span style="color:#C792EA;">root</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  --main-font</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Noto Sans SC</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> sans-serif</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#FFCB6B;">p</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#B2CCD6;">font-family</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">var</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">--main-font</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>这个代码清单定义了一个名叫--main-font的变量。将其值设置为一些常见的sans-serif字体。变量名前面必须有两个连字符（--），用来跟CSS属性区分，剩下的部分可以随意命名。</p><p>var()函数接受第二个参数，它指定了备用值。如果第一个参数指定的变量未定义，那么就会使用第二个值。</p><div class="language-css line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">p</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#B2CCD6;">font-family</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">var</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">--main-font</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Noto Sans SC</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> sans-serif</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>如果var()函数算出来的是一个非法值，对应的属性就会设置为其初始值。</p><h3 id="动态修改css变量" tabindex="-1">动态修改CSS变量 <a class="header-anchor" href="#动态修改css变量" aria-label="Permalink to &quot;动态修改CSS变量&quot;">​</a></h3><div class="language-css line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">dark</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  --font-color</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">#</span><span style="color:#A6ACCD;">fff</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">  --bg-color</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">#</span><span style="color:#A6ACCD;">333</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">light</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  --font-color</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">#</span><span style="color:#A6ACCD;">333</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">  --bg-color</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">#</span><span style="color:#A6ACCD;">fff</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>通过修改类名来实现动态修改CSS变量。</p><p>还可以通过JavaScript修改css变量。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> rootElement </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> document</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">documentElement</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">rootElement</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">style</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">setProperty</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">--font-color</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">red</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>利用这种技术，就可以用JavaScript实时切换网站主题，或者在网页中突出显示某些元素，或者实时改变任意多个元素。只需要几行JavaScript代码，就可以进行更改，从而影响网页上的大量元素。</p><h2 id="盒模型" tabindex="-1">盒模型 <a class="header-anchor" href="#盒模型" aria-label="Permalink to &quot;盒模型&quot;">​</a></h2><p>默认盒模型：box-sizing: content-box; <img src="https://res.weread.qq.com/wrepub/epub_31594821_103" alt="盒模型"></p><p>当给一个元素设置宽或高的时候，指定的是内容的宽或高，所有内边距、边框、外边距都是追加到该宽度上的。</p><p>box-sizing的默认值为content-box，这意味任何指定的宽或高都只会设置内容盒子的大小。将box-sizing设置为<code>border-box</code>后，height和width属性会设置内容、内边距以及<code>边框的大小</code>总和，这刚好符合示例的要求。 <img src="https://res.weread.qq.com/wrepub/epub_31594821_104" alt="border-box"></p><h3 id="溢出控制" tabindex="-1">溢出控制 <a class="header-anchor" href="#溢出控制" aria-label="Permalink to &quot;溢出控制&quot;">​</a></h3><p>用overflow属性可以控制溢出内容的行为，该属性支持以下4个值。</p><p>❑ visible（默认值）——所有内容可见，即使溢出容器边缘。</p><p>❑ hidden——溢出容器内边距边缘的内容被裁剪，无法看见。</p><p>❑ scroll——容器出现滚动条，用户可以通过滚动查看剩余内容。在一些操作系统上，会出现水平和垂直两种滚动条，即使所有内容都可见（不溢出）。不过，在这种情况下，滚动条不可滚动（置灰）。</p><p>❑ auto——只有内容溢出时容器才会出现滚动条。</p><p><img src="https://res.weread.qq.com/wrepub/epub_31594821_114" alt="overflow"></p><h3 id="为什么vertical-align不生效" tabindex="-1">为什么vertical-align不生效 <a class="header-anchor" href="#为什么vertical-align不生效" aria-label="Permalink to &quot;为什么vertical-align不生效&quot;">​</a></h3><blockquote><p>如果开发人员期望给块级元素设置vertical-align: middle后，块级元素里的内容就能垂直居中，那么他们通常会失望，因为浏览器会忽略这个声明。vertical-align声明只会影响行内元素或者table-cell元素。对于行内元素，它控制着该元素跟同一行内其他元素之间的对齐关系。比如，可以用它控制一个行内的图片跟相邻的文字对齐。</p></blockquote><h3 id="水平垂直居中方案" tabindex="-1">水平垂直居中方案 <a class="header-anchor" href="#水平垂直居中方案" aria-label="Permalink to &quot;水平垂直居中方案&quot;">​</a></h3><ol><li>flex布局</li></ol><div class="language-css line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">display: flex;</span></span>
<span class="line"><span style="color:#FFCB6B;">align-items</span><span style="color:#A6ACCD;">: center;</span></span>
<span class="line"><span style="color:#FFCB6B;">justify-content</span><span style="color:#A6ACCD;">: center;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><ol start="2"><li>margin</li></ol><div class="language-css line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">margin: 0 auto;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ol start="3"><li>绝对定位</li></ol><div class="language-css line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">position: absolute;</span></span>
<span class="line"><span style="color:#A6ACCD;">top: 50%;</span></span>
<span class="line"><span style="color:#A6ACCD;">left: 50%;</span></span>
<span class="line"><span style="color:#A6ACCD;">transform: translate(-50%</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> -50%);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><ol start="4"><li>grid布局</li></ol><div class="language-css line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">display: grid;</span></span>
<span class="line"><span style="color:#FFCB6B;">place-items</span><span style="color:#A6ACCD;">: center;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="负外边距" tabindex="-1">负外边距 <a class="header-anchor" href="#负外边距" aria-label="Permalink to &quot;负外边距&quot;">​</a></h3><p>不同于内边距和边框宽度，外边距可以设置为负值。负外边距有一些特殊用途，比如让元素重叠或者拉伸到比容器还宽。</p><p><img src="https://res.weread.qq.com/wrepub/epub_31594821_124" alt="负外边距"></p><h3 id="外边距折叠" tabindex="-1">外边距折叠 <a class="header-anchor" href="#外边距折叠" aria-label="Permalink to &quot;外边距折叠&quot;">​</a></h3><p>当顶部和/或底部的外边距相邻时，就会重叠，产生单个外边距。这种现象被称作折叠。</p><p>即使两个元素<code>不是相邻的兄弟节点</code>也会产生外边距折叠。即使将这个段落用一个额外的div包裹起来。</p><p>总之，所有相邻的顶部和底部外边距会折叠到一起。如果在页面中添加一个空的、无样式的div（没有高度、边框和内边距），它自己的顶部和底部外边距就会折叠。</p><blockquote><p>只有上下外边距会产生折叠，左右外边距不会折叠。</p></blockquote><p>如何防止外边距折叠？</p><p>❑ 对容器使用overflow: auto（或者非visible的值），防止内部元素的外边距跟容器外部的外边距折叠。这种方式副作用最小。</p><p>❑ 在两个外边距之间加上边框或者内边距，防止它们折叠。</p><p>❑ 如果容器为浮动元素、内联块、绝对定位或固定定位时，外边距不会在它外面折叠。</p><p>❑ 当使用Flexbox布局时，弹性布局内的元素之间不会发生外边距折叠。</p><p>❑ 当元素显示为table-cell时不具备外边距属性，因此它们不会折叠。此外还有table-row和大部分其他表格显示类型，但不包括table、table-inline、table-caption。</p>`,73),o=[p];function t(r,i,c,d,b,D){return a(),n("div",null,o)}const m=s(e,[["render",t]]);export{C as __pageData,m as default};
