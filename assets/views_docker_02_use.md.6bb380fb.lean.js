import{_ as s,v as a,b as n,R as l}from"./chunks/framework.caa0fbaf.js";const u=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[{"level":2,"title":"容器化","slug":"容器化","link":"#容器化","children":[]},{"level":2,"title":"Dockerfile","slug":"dockerfile","link":"#dockerfile","children":[{"level":3,"title":"FROM","slug":"from","link":"#from","children":[]},{"level":3,"title":"MAINTAINER","slug":"maintainer","link":"#maintainer","children":[]},{"level":3,"title":"RUN","slug":"run","link":"#run","children":[]},{"level":3,"title":"COPY","slug":"copy","link":"#copy","children":[]},{"level":3,"title":"ADD","slug":"add","link":"#add","children":[]},{"level":3,"title":"CMD","slug":"cmd","link":"#cmd","children":[]},{"level":3,"title":"ENV","slug":"env","link":"#env","children":[]},{"level":3,"title":"EXPOSE","slug":"expose","link":"#expose","children":[]},{"level":3,"title":"ENTRYPOINT","slug":"entrypoint","link":"#entrypoint","children":[]},{"level":3,"title":"VOLUME","slug":"volume","link":"#volume","children":[]},{"level":3,"title":"LABEL","slug":"label","link":"#label","children":[]},{"level":3,"title":"WORKDIR","slug":"workdir","link":"#workdir","children":[]}]},{"level":2,"title":"容器的使用","slug":"容器的使用","link":"#容器的使用","children":[{"level":3,"title":"获取镜像","slug":"获取镜像","link":"#获取镜像","children":[]},{"level":3,"title":"启动容器","slug":"启动容器","link":"#启动容器","children":[]},{"level":3,"title":"启动已停止运行的容器","slug":"启动已停止运行的容器","link":"#启动已停止运行的容器","children":[]},{"level":3,"title":"后台运行","slug":"后台运行","link":"#后台运行","children":[]},{"level":3,"title":"停止容器","slug":"停止容器","link":"#停止容器","children":[]},{"level":3,"title":"进入容器","slug":"进入容器","link":"#进入容器","children":[]},{"level":3,"title":"导入导出容器","slug":"导入导出容器","link":"#导入导出容器","children":[]},{"level":3,"title":"删除容器","slug":"删除容器","link":"#删除容器","children":[]}]}],"relativePath":"views/docker/02_use.md","filePath":"views/docker/02_use.md","lastUpdated":1695563543000}'),e={name:"views/docker/02_use.md"},p=l(`<h2 id="容器化" tabindex="-1">容器化 <a class="header-anchor" href="#容器化" aria-label="Permalink to &quot;容器化&quot;">​</a></h2><p><img src="https://z1.ax1x.com/2023/09/24/pPTIw6J.png" alt="pPTIw6J.png"></p><h2 id="dockerfile" tabindex="-1">Dockerfile <a class="header-anchor" href="#dockerfile" aria-label="Permalink to &quot;Dockerfile&quot;">​</a></h2><p>Dockerfile是一个文本文件，内容是一条一条的指令，每条指令构建一层，因此每条指令的内容，就是描述该层应当如何构建。</p><p>有了Dockerfile，我们只需要简单地运行一个命令，就可以一键构建出整个容器，包括操作系统、库、环境变量等各种配置。</p><h3 id="from" tabindex="-1">FROM <a class="header-anchor" href="#from" aria-label="Permalink to &quot;FROM&quot;">​</a></h3><p>FROM 表示设置要制作的镜像基于哪个镜像，FROM指令必须是整个Dockerfile的第一个指令，如果指定的镜像不存在默认会自动从Docker Hub上下载。</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">FROM</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">imag</span><span style="color:#A6ACCD;">e</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#FFCB6B;">FROM</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">imag</span><span style="color:#A6ACCD;">e</span><span style="color:#89DDFF;">&gt;</span><span style="color:#C3E88D;">:</span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">ta</span><span style="color:#A6ACCD;">g</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#FFCB6B;">FROM</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">imag</span><span style="color:#A6ACCD;">e</span><span style="color:#89DDFF;">&gt;</span><span style="color:#C3E88D;">@</span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">diges</span><span style="color:#A6ACCD;">t</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FFCB6B;">FROM</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">node:latest</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h3 id="maintainer" tabindex="-1">MAINTAINER <a class="header-anchor" href="#maintainer" aria-label="Permalink to &quot;MAINTAINER&quot;">​</a></h3><p>作者信息。</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">MAINTAINER</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">nam</span><span style="color:#A6ACCD;">e</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FFCB6B;">MAINTAINER</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">zhangsan</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">shuaige@example.com</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="run" tabindex="-1">RUN <a class="header-anchor" href="#run" aria-label="Permalink to &quot;RUN&quot;">​</a></h3><p>构建镜像执行的命令。</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">RUN</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">命令行命</span><span style="color:#A6ACCD;">令</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FFCB6B;">RUN</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">mkdir</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-p</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">./index</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>&lt;命令行命令&gt; 指的就是 在终端输入的shell指令。 exec格式：</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">RUN</span><span style="color:#A6ACCD;"> [</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">可执行文件</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">, </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">参数1</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">参数2</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>这里可以把 ”可执行文件“ 理解成一个可接受参数的执行文件，”参数1“、”参数2“ 顾名思义是给执行文件的具体传参。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>Dockerfile中每个指令都会新建立一层，多个RUN指令就构建多少层镜像，这就会导致镜像冗余，增加部署的时间不说，还容易出错。</p></div><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">RUN</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">yum</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-y</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">install</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">wget</span><span style="color:#A6ACCD;"> \\</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&amp;&amp;</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">wget</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-O</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">redis.tar.gz</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">http://download.redis.io/releases/redis-5.0.3.tar.gz</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> \\</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&amp;&amp;</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">tar</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-xvf</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">redis.tar.gz</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>从例子中可以看出，需要书写多行命令时，命令与命令之间用\\ 换行 &amp;&amp;来进行拼接。这样执行之后，只会产生一层镜像。</p><h3 id="copy" tabindex="-1">COPY <a class="header-anchor" href="#copy" aria-label="Permalink to &quot;COPY&quot;">​</a></h3><p>复制命令。将上下文目录中的文件都copy到container（运行此镜像的容器）文件系统的文件夹下。</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">COPY</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">源路</span><span style="color:#A6ACCD;">径</span><span style="color:#89DDFF;">&gt;</span><span style="color:#C3E88D;">...</span><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">目标路</span><span style="color:#A6ACCD;">径</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FFCB6B;">或</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FFCB6B;">COPY</span><span style="color:#A6ACCD;"> [</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">&lt;源路径&gt;</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">,...  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">&lt;目标路径&gt;</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>源路径：源文件或源目录。 目标路径：容器内指定路径，路径不存在会被自动创建。</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">COPY</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">./index</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">/crawler_node/index</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>这里源路径为./index，目标路径为/crawler_node/index。</p><h3 id="add" tabindex="-1">ADD <a class="header-anchor" href="#add" aria-label="Permalink to &quot;ADD&quot;">​</a></h3><p>将本地文件添加到容器, ADD的功能与COPY类似，都是将本地文件复制到容器中，都会自动创建容器目录。</p><p>不同点在于:</p><ol><li>ADD可以将tar类型（压缩格式为gzip、bzip2以及xz）的文件自动解压；而COPY不会</li><li>ADD可以加载网络资源，但不会自动解压；COPY不能访问网络资源</li></ol><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">ADD</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">./bin/</span><span style="color:#A6ACCD;">*</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">/usr/bin</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>将当前目录下的bin文件夹内所有不带后缀的文件拷贝到/usr/bin目录下。</p><h3 id="cmd" tabindex="-1">CMD <a class="header-anchor" href="#cmd" aria-label="Permalink to &quot;CMD&quot;">​</a></h3><p>当容器启动所运行的命令。</p><p>这时候小伙伴可能有疑问了，RUN不也是用于运行程序的指令吗，CMD和RUN有啥区别？</p><p>区别在于<strong>CMD是启动容器时用到的指令，而RUN是构建镜像需要的指令。换句话说，先用RUN命令构建镜像，镜像构建成功后，需要用CMD来将新构建的镜像进行启动，有点类似于npm run serve。</strong></p><p>CMD格式与RUN相类似，也是两种格式:</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">shell</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">格式：CMD</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">命</span><span style="color:#A6ACCD;">令</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF;">exec</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">格式：CMD</span><span style="color:#A6ACCD;"> [</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">可执行文件</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">, </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">参数1</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">参数2</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">...]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FFCB6B;">参数列表格式：CMD</span><span style="color:#A6ACCD;"> [</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">参数1</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">, </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">参数2</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">...]。在指定了</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">ENTRYPOINT</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">指令后，用</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">CMD</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">指定具体的参数。</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>例如：</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">CMD</span><span style="color:#A6ACCD;"> [</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">node</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">, </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">index.js</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="env" tabindex="-1">ENV <a class="header-anchor" href="#env" aria-label="Permalink to &quot;ENV&quot;">​</a></h3><p>设置环境变量。</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">ENV</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">ke</span><span style="color:#A6ACCD;">y</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">valu</span><span style="color:#A6ACCD;">e</span><span style="color:#89DDFF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>定义了环境变量，后续就可以使用这个环境变量的值。</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">ENV</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">HOST</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0.0</span><span style="color:#C3E88D;">.0.0</span></span>
<span class="line"><span style="color:#FFCB6B;">ENV</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">PORT</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">8081</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>后续使用$HOST就能引用到0.0.0.0的值</p><h3 id="expose" tabindex="-1">EXPOSE <a class="header-anchor" href="#expose" aria-label="Permalink to &quot;EXPOSE&quot;">​</a></h3><p>监听端口。 用于为容器开放要监听的端口，以实现与外部的通信。</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">EXPOSE</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">8081</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>这样会将端口号8081暴露出来。</p><h3 id="entrypoint" tabindex="-1">ENTRYPOINT <a class="header-anchor" href="#entrypoint" aria-label="Permalink to &quot;ENTRYPOINT&quot;">​</a></h3><p>容器启动时执行的命令。</p><p>ENTRYPOINT命令和CMD很像，ENTRYPOINT也有两种格式，shell格式和exec格式，它们的用法与CMD相同。 如果dockerfile中有多个ENTRYPOINT指令，只有最后一个会生效。如果docker run命令中指定了--entrypoint选项，那么dockerfile中的ENTRYPOINT会被覆盖。</p><p>CMD和ENTRYPOINT可以结合使用，这样CMD的内容会作为ENTRYPOINT的参数传递。例如，如果dockerfile中有如下指令：</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">ENTRYPOINT</span><span style="color:#A6ACCD;"> [</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">ping</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">]</span></span>
<span class="line"><span style="color:#FFCB6B;">CMD</span><span style="color:#A6ACCD;"> [</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">www.baidu.com</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>那么容器启动时会执行ping www.baidu.com这个命令。 如果docker run命令中指定了其他参数，如docker run myimage www.google.com，那么容器启动时会执行ping www.google.com这个命令，覆盖了dockerfile中的CMD。 如果dockerfile中有多个CMD指令，那么只有最后一个会生效。</p><h3 id="volume" tabindex="-1">VOLUME <a class="header-anchor" href="#volume" aria-label="Permalink to &quot;VOLUME&quot;">​</a></h3><p>用于在image中创建一个挂载目录，以挂载宿主机上的目录。</p><p>通过dockerfile的 VOLUME 指令可以在镜像中创建挂载点，这样只要通过该镜像创建的容器都有了挂载点，但值得注意的是通过 VOLUME 指令创建的挂载点，无法指定主机上对应的目录，而是自动生成的。</p><p><a href="https://www.cnblogs.com/Json1208/p/8975403.html" target="_blank" rel="noreferrer">https://www.cnblogs.com/Json1208/p/8975403.html</a></p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">VOLUME</span><span style="color:#A6ACCD;"> [</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">/data</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>数据卷。</p><p>VOLUME 命令会创建一个可以从本地主机或其他容器挂载的挂载点，与-v选项一样。</p><h3 id="label" tabindex="-1">LABEL <a class="header-anchor" href="#label" aria-label="Permalink to &quot;LABEL&quot;">​</a></h3><p>LABEL和MAINTAINER相类似，也可以添加一些作者的信息。通过LABEL可以为镜像添加一些元数据，格式如下：</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">LABEL</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">ke</span><span style="color:#A6ACCD;">y</span><span style="color:#89DDFF;">&gt;</span><span style="color:#C3E88D;">=</span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">valu</span><span style="color:#A6ACCD;">e</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">ke</span><span style="color:#A6ACCD;">y</span><span style="color:#89DDFF;">&gt;</span><span style="color:#C3E88D;">=</span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">valu</span><span style="color:#A6ACCD;">e</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">...</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">LABEL</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">version=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">1.0</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#FFCB6B;">LABEL</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">author=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">萧瑟</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#FFCB6B;">LABEL</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">description=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">这是一个demo</span><span style="color:#89DDFF;">&quot;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="workdir" tabindex="-1">WORKDIR <a class="header-anchor" href="#workdir" aria-label="Permalink to &quot;WORKDIR&quot;">​</a></h3><p>指定工作区。</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">WORKDIR</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">工作区目</span><span style="color:#A6ACCD;">录</span><span style="color:#89DDFF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>WORKDIR指令的作用就是用来指定工作目录，如果目录不存在，该命令会自动创建目录。</p><h2 id="容器的使用" tabindex="-1">容器的使用 <a class="header-anchor" href="#容器的使用" aria-label="Permalink to &quot;容器的使用&quot;">​</a></h2><h3 id="获取镜像" tabindex="-1">获取镜像 <a class="header-anchor" href="#获取镜像" aria-label="Permalink to &quot;获取镜像&quot;">​</a></h3><p>如果我们本地没有 ubuntu 镜像，我们可以使用 docker pull 命令来载入 ubuntu 镜像：</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">$</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">docker</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">pull</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">ubuntu</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="启动容器" tabindex="-1">启动容器 <a class="header-anchor" href="#启动容器" aria-label="Permalink to &quot;启动容器&quot;">​</a></h3><p>以下命令使用 ubuntu 镜像启动一个容器，参数为以命令行模式进入该容器：</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">$</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">docker</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">run</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-it</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">ubuntu</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">/bin/bash</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>参数说明：</p><ul><li>-i: 交互式操作。</li><li>-t: 终端。</li><li>ubuntu: ubuntu 镜像。</li><li>/bin/bash：放在镜像名后的是命令，这里我们希望有个交互式 Shell，因此用的是 /bin/bash。</li></ul><p>要退出终端，直接输入 exit:</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">root@ed09e4490c57:/#</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">exit</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="启动已停止运行的容器" tabindex="-1">启动已停止运行的容器 <a class="header-anchor" href="#启动已停止运行的容器" aria-label="Permalink to &quot;启动已停止运行的容器&quot;">​</a></h3><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">$</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">docker</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">ps</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-a</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><img src="https://www.runoob.com/wp-content/uploads/2016/05/docker-container-psa.png" alt="docker"> 启动已经停止的容器：</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">$</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">docker</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">start</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">b750bbbcfd88</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="后台运行" tabindex="-1">后台运行 <a class="header-anchor" href="#后台运行" aria-label="Permalink to &quot;后台运行&quot;">​</a></h3><p>在大部分的场景下，我们希望 docker 的服务是在后台运行的，我们可以过 -d 指定容器的运行模式。</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">$</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">docker</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">run</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-itd</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--name</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">ubuntu-test</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">ubuntu</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">/bin/bash</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>注：加了 -d 参数默认不会进入容器，想要进入容器需要使用指令 docker exec（下面会介绍到）。</p><h3 id="停止容器" tabindex="-1">停止容器 <a class="header-anchor" href="#停止容器" aria-label="Permalink to &quot;停止容器&quot;">​</a></h3><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">$</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">docker</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">stop</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">容器</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">I</span><span style="color:#A6ACCD;">D</span><span style="color:#89DDFF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>停止的容器可以通过 docker restart 重启：</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">$</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">docker</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">restart</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">容器</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">I</span><span style="color:#A6ACCD;">D</span><span style="color:#89DDFF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="进入容器" tabindex="-1">进入容器 <a class="header-anchor" href="#进入容器" aria-label="Permalink to &quot;进入容器&quot;">​</a></h3><p>在使用 -d 参数时，容器启动后会进入后台。此时想要进入容器，可以通过以下指令进入：</p><ul><li><p>docker attach</p></li><li><p>docker exec：推荐大家使用 docker exec 命令，因为此命令会退出容器终端，但不会导致容器的停止。</p></li></ul><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">docker</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">exec</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-it</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">243</span><span style="color:#C3E88D;">c32535da7</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">/bin/bash</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="导入导出容器" tabindex="-1">导入导出容器 <a class="header-anchor" href="#导入导出容器" aria-label="Permalink to &quot;导入导出容器&quot;">​</a></h3><p>如果要导出本地某个容器，可以使用 docker export 命令。</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">$</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">docker</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#C3E88D;">e560fca3906</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">ubuntu.tar</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>导出容器 1e560fca3906 快照到本地文件 ubuntu.tar。</p><p>可以使用 docker import 从容器快照文件中再导入为镜像，以下实例将快照文件 ubuntu.tar 导入到镜像 test/ubuntu:v1:</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">$</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">cat</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">docker/ubuntu.tar</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">docker</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">test/ubuntu:v1</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>此外，也可以通过指定 URL 或者某个目录来导入，例如：</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">$</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">docker</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">http://example.com/exampleimage.tgz</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">example/imagerepo</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="删除容器" tabindex="-1">删除容器 <a class="header-anchor" href="#删除容器" aria-label="Permalink to &quot;删除容器&quot;">​</a></h3><p>删除容器使用 docker rm 命令：</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">$</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">docker</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">rm</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-f</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#C3E88D;">e560fca3906</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div>`,109),o=[p];function r(t,c,i,C,d,y){return a(),n("div",null,o)}const b=s(e,[["render",r]]);export{u as __pageData,b as default};
