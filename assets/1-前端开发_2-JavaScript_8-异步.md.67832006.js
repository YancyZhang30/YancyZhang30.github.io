import{_ as s,v as a,b as n,R as l}from"./chunks/framework.caa0fbaf.js";const C=JSON.parse('{"title":"异步","description":"","frontmatter":{},"headers":[],"relativePath":"1-前端开发/2-JavaScript/8-异步.md","filePath":"1-前端开发/2-JavaScript/8-异步.md","lastUpdated":1697631288000}'),p={name:"1-前端开发/2-JavaScript/8-异步.md"},o=l(`<h1 id="异步" tabindex="-1">异步 <a class="header-anchor" href="#异步" aria-label="Permalink to &quot;异步&quot;">​</a></h1><h2 id="_1-回调" tabindex="-1">1.回调 <a class="header-anchor" href="#_1-回调" aria-label="Permalink to &quot;1.回调&quot;">​</a></h2><p>最早的JavaScript异步解决方案是使用回调函数。回调函数是一种将函数作为参数传递给另一个函数，并在特定事件发生时被调用的方式。这种方式可以确保在异步操作完成后执行特定的代码。</p><p>优点：</p><ul><li>简单易懂，容易上手。</li><li>可以处理简单的异步操作。</li></ul><p>缺点：</p><ul><li>回调地狱：当有多个异步操作需要依次执行时，代码会变得混乱和难以维护。</li><li>错误处理困难：如果一个回调函数中发生错误，很难捕获和处理这个错误。</li><li>代码复用困难：如果多个地方需要使用相同的回调函数，就需要重复定义多次。</li></ul><h2 id="_2-promise" tabindex="-1">2.Promise <a class="header-anchor" href="#_2-promise" aria-label="Permalink to &quot;2.Promise&quot;">​</a></h2><p>为了解决回调地狱和错误处理困难等问题，ES6引入了Promise对象。Promise是一种表示异步操作最终完成或失败的对象。 优点：</p><ul><li>可以链式调用：通过返回Promise对象，可以使用.then()方法在异步操作完成后执行下一步操作，避免了回调地狱。</li><li>错误处理更方便：可以使用.catch()方法捕获和处理错误。</li><li>代码复用更容易：可以通过定义一个Promise对象，在多个地方复用。</li></ul><p>缺点：</p><ul><li>无法取消Promise：一旦创建了一个Promise对象，就无法取消它。</li><li>只能表示一次性的结果：Promise对象只能表示异步操作的最终结果，无法表示中间状态。</li></ul><h2 id="_3-generator" tabindex="-1">3.Generator <a class="header-anchor" href="#_3-generator" aria-label="Permalink to &quot;3.Generator&quot;">​</a></h2><p>ES6还引入了Generator函数，它是一种特殊的函数，可以暂停和恢复执行。Generator函数通过yield关键字将函数的执行暂停，并通过next()方法恢复执行。</p><p>优点：</p><ul><li>可以暂停和恢复执行：可以在异步操作中暂停执行，并在需要时恢复执行。</li><li>可以使用同步的方式编写异步代码：Generator函数可以使用同步的方式编写异步代码，使代码更易读和维护。</li></ul><p>缺点：</p><ul><li>需要手动控制迭代器：需要手动调用next()方法来控制Generator函数的执行。</li><li>无法自动捕获错误：需要手动编写错误处理逻辑。</li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">fetchData</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">yield</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">new</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">Promise</span><span style="color:#F07178;">(</span><span style="color:#C792EA;">function</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">resolve</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;font-style:italic;">reject</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">setTimeout</span><span style="color:#F07178;">(</span><span style="color:#C792EA;">function</span><span style="color:#89DDFF;">()</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">data</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Hello, World!</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#82AAFF;">resolve</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">data</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">},</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">1000</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> generator </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">fetchData</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> promise </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> generator</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">next</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">value</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">promise</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">then</span><span style="color:#A6ACCD;">(</span><span style="color:#C792EA;">function</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">data</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">data</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">generator</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">next</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">catch</span><span style="color:#A6ACCD;">(</span><span style="color:#C792EA;">function</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">error</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">error</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">error</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">generator</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">throw</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">error</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div><h2 id="_4-async-await" tabindex="-1">4.Async/Await <a class="header-anchor" href="#_4-async-await" aria-label="Permalink to &quot;4.Async/Await&quot;">​</a></h2><p>ES7引入了Async/Await语法糖，它是基于Generator函数的语法扩展。Async/Await使得异步代码看起来像同步代码一样，并且自动处理错误。</p><p>优点：</p><ul><li>代码更简洁易读：使用Async/Await可以将异步代码写成类似于同步代码的形式，使得代码更易读和维护。</li><li>错误处理更方便：可以使用try/catch语句来捕获和处理错误。</li></ul><p>缺点：</p><ul><li>无法取消异步操作：与Promise一样，无法取消已经开始的异步操作。</li></ul>`,25),e=[o];function r(t,c,i,F,y,D){return a(),n("div",null,e)}const u=s(p,[["render",r]]);export{C as __pageData,u as default};
