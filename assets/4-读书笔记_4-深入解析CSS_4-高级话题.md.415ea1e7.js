import{_ as a,v as e,b as r,R as t}from"./chunks/framework.caa0fbaf.js";const m=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"4-读书笔记/4-深入解析CSS/4-高级话题.md","filePath":"4-读书笔记/4-深入解析CSS/4-高级话题.md","lastUpdated":1719037263000}'),p={name:"4-读书笔记/4-深入解析CSS/4-高级话题.md"},o=t('<p>一个网站，从看起来还可以，到看起来非常棒，差别在于细节。在实现了页面里某个组件的布局并写完样式之后，不要急着继续，有意识地训练自己，以挑剔的眼光审视刚刚完成的代码。如果增加（或者减少）一点内边距是不是看起来更好？调整一下颜色，稍微变深或变浅，或者不要那么鲜艳，是不是效果更好一点？如果你正在开发设计师详细的视觉稿，那么你的实现效果是否尽可能做到了完美还原？设计师可是花费了很多精力推敲那些细节的，一定要认真对待这件事情。</p><h2 id="背景" tabindex="-1">背景 <a class="header-anchor" href="#背景" aria-label="Permalink to &quot;背景&quot;">​</a></h2><p>background属性依然还有很多的功能等待我们去探索。实际上，它是以下八个属性的简写。</p><h3 id="background-image" tabindex="-1">background-image <a class="header-anchor" href="#background-image" aria-label="Permalink to &quot;background-image&quot;">​</a></h3><p>指定一个文件或者生成的颜色渐变作为背景图片。</p><p>background-image属性非常有意思。你已经知道这个属性可以接受一个图片URL路径，而它也可以接受一个渐变函数。</p><p><img src="https://res.weread.qq.com/wrepub/epub_31594821_379" alt="渐变"></p><p><img src="https://res.weread.qq.com/wrepub/epub_31594821_378" alt="渐变"></p><p>渐变实际上就是背景图片，渐变本身不会影响元素的大小。为了演示，我们给元素明确设置了宽高。因为元素是空的，所以必须手动设置高度才能看到渐变效果。</p><p>linear-gradient函数使用三个参数来定义行为：角度、起始颜色和终止颜色。这里角度值是to right，意思是渐变从元素的左侧开始（这里是白色），平滑过渡到右侧（这里是蓝色）。也可以使用其他的颜色表示法，比如hex（#0000ff）、RGB（rgb(0, 0, 255)）或者transparent关键字。</p><p>有好几种不同的方式来指定渐变的角度。在本例中，我们使用了to right，当然也可以使用to top或者to bottom。甚至可以指定某个对角，比如to bottom right，这样的话，渐变会从元素的左上角开始，逐渐过渡到右下角。</p><p>我们可以使用更确切的单位（比如度），更精确地控制角度。值0deg代表<code>垂直向上</code>（相当于to top），更大的值会沿着顺时针变化，因此<code>90deg代表向右渐变，</code>180deg代表向下渐变，360deg又会代表向上渐变。</p><p><img src="https://res.weread.qq.com/wrepub/epub_31594821_381" alt="渐变"></p><p>度是最常用的单位，还有一些其他单位可以用来表示角度，如下所示。</p><p>❑ rad——弧度（radian）。一个完整的圆是2π，大概是6.2832弧度。</p><p>❑ turn——代表环绕圆周的圈数。一圈相当于360度（360deg）。可以使用小数来表示不足一圈，比如0.25turn相当于90deg。</p><p>❑ grad——百分度（gradian）。一个完整的圆是400百分度（400grad）,100grad相当于90deg。</p><p>大部分渐变只需要两个颜色，从一个颜色过渡到另一个。也可以定义包含多个颜色的渐变，其中每个颜色可以称为一个颜色节点（colorstop）。</p><p><img src="https://res.weread.qq.com/wrepub/epub_31594821_383" alt="多颜色"><img src="https://res.weread.qq.com/wrepub/epub_31594821_382" alt="多颜色"></p><p>一个渐变可以接受任意数量的颜色节点，节点之间通过逗号分隔。渐变会自动均匀地平铺这些颜色节点。在本例中，最左侧（0%）从红色开始，过渡到中间（50%）的白色，到最右侧的蓝色（100%）。我们也可以在渐变函数中为每个颜色节点明确指定位置。</p><p>从这个例子你可能已经猜到了，颜色节点的位置可以调整，不是必须均匀分布。除了使用百分比来定位以外，还可以使用像素、em或者其他长度单位。</p><h4 id="条纹" tabindex="-1">条纹 <a class="header-anchor" href="#条纹" aria-label="Permalink to &quot;条纹&quot;">​</a></h4><p>如果在同一个位置设置两个颜色节点，那么渐变会直接从一个颜色变换到另一个，而不是平滑过渡。</p><p><img src="https://res.weread.qq.com/wrepub/epub_31594821_386" alt="条纹"><img src="https://res.weread.qq.com/wrepub/epub_31594821_385" alt="条纹"></p><p>因为第一个颜色节点是红色，在40%的位置，所以渐变从左侧边缘一直到40%是纯红色；因为第二个颜色节点是白色，也是在40%的位置，所以渐变在这里直接变成了白色；接下来因为在60%的位置，还有一个白色的颜色节点，所以40%到60%之间的渐变是纯白色；最后一个颜色节点是蓝色，也是在60%的位置，这样就会直接变换成蓝色，然后一直到右侧边缘是蓝色。</p><h4 id="重复渐变" tabindex="-1">重复渐变 <a class="header-anchor" href="#重复渐变" aria-label="Permalink to &quot;重复渐变&quot;">​</a></h4><p>搭配另一个稍微有点不同的渐变函数时，这个函数就是<code>repeating-linear-gradient()</code>。此函数和函数linear-gradient的效果基本相同，唯一的区别就是前者会重复。这最终生成的条纹类似于理发店门口的旋转招牌，用在进度条上效果非常棒。</p><p><img src="https://res.weread.qq.com/wrepub/epub_31594821_388" alt="重复渐变"><img src="https://res.weread.qq.com/wrepub/epub_31594821_387" alt="重复渐变"></p><p>对于重复渐变，最好使用特定的长度而不是百分比，因为设置的值决定了要重复的图片大小。</p><h4 id="径向渐变" tabindex="-1">径向渐变 <a class="header-anchor" href="#径向渐变" aria-label="Permalink to &quot;径向渐变&quot;">​</a></h4><p>另一类渐变是径向渐变。线性渐变是从元素的一端开始，沿着直线过渡到另一端，而径向渐变不同，它是从一个点开始，全方位向外扩展。</p><p><img src="https://res.weread.qq.com/wrepub/epub_31594821_390" alt="径向渐变"><img src="https://res.weread.qq.com/wrepub/epub_31594821_389" alt="径向渐变"></p><p>默认情况下，渐变在元素中是从中心开始，平滑过渡到边缘。渐变整体呈椭圆形，跟随元素大小进行变化（也就是说，较宽的元素，其径向渐变也较宽，反之亦然）。</p><p>跟线性渐变一样，径向渐变同样支持颜色节点。你可以提供多个节点，使用百分比或者长度单位指定节点位置。你也可以把径向渐变设置为圆形而非椭圆，甚至可以指定渐变中心点的位置。repeating-radial-gradient()函数可以重复生成图样，形成同心圆环。</p><p><img src="https://res.weread.qq.com/wrepub/epub_31594821_391" alt="径向渐变"></p><h3 id="background-position" tabindex="-1">background-position <a class="header-anchor" href="#background-position" aria-label="Permalink to &quot;background-position&quot;">​</a></h3><p>设置背景图片的初始位置。</p><h3 id="background-size" tabindex="-1">background-size <a class="header-anchor" href="#background-size" aria-label="Permalink to &quot;background-size&quot;">​</a></h3><p>指定元素内背景图片的渲染尺寸。</p><p>background-size属性接受了两个特殊的关键字值，分别是cover和contain。</p><p>使用cover值可以调整背景图片的大小，使其填满整个元素，这样会导致图片的边缘被裁切掉一部分；</p><p>使用contain值可以保证整个背景图片可见，尽管这可能导致元素的一些地方不会被背景图片覆盖（就像“letterboxing”效果）。</p><p>该属性也可以接受长度值，用来明确设置背景图片的宽度和高度。</p><h3 id="background-repeat" tabindex="-1">background-repeat <a class="header-anchor" href="#background-repeat" aria-label="Permalink to &quot;background-repeat&quot;">​</a></h3><p>决定在需要填充整个元素时，是否平铺图片。</p><h3 id="background-origin" tabindex="-1">background-origin <a class="header-anchor" href="#background-origin" aria-label="Permalink to &quot;background-origin&quot;">​</a></h3><p>决定背景相对于元素的边框盒、内边距框盒（初始值）或内容盒子来定位。</p><h3 id="background-clip" tabindex="-1">background-clip <a class="header-anchor" href="#background-clip" aria-label="Permalink to &quot;background-clip&quot;">​</a></h3><p>指定背景是否应该填充边框盒（初始值）、内边距框盒或内容盒子。</p><h3 id="background-attachment" tabindex="-1">background-attachment <a class="header-anchor" href="#background-attachment" aria-label="Permalink to &quot;background-attachment&quot;">​</a></h3><p>指定背景图片是随着元素上下滚动（初始值），还是固定在视口区域。注意，使用fixed值会对页面性能产生负面影响。</p><h3 id="background-color" tabindex="-1">background-color <a class="header-anchor" href="#background-color" aria-label="Permalink to &quot;background-color&quot;">​</a></h3><p>指定纯色背景，渲染到背景图片下方。</p><h2 id="阴影" tabindex="-1">阴影 <a class="header-anchor" href="#阴影" aria-label="Permalink to &quot;阴影&quot;">​</a></h2><p>阴影是另一种可以为网页增加立体感的特效。有两个属性可以创建阴影，box-shadow可以为元素盒子生成阴影，text-shadow可以为渲染后的文字生成阴影。</p><p><img src="https://res.weread.qq.com/wrepub/epub_31594821_393" alt="阴影"></p><p>阴影与元素的大小和尺寸相同。如果元素设置了border-radius，那么阴影相应地也会有圆角。阴影的水平偏移量（x）、垂直偏移量（y）和颜色都不可或缺。还有两个值是可选的：模糊半径和扩展半径。</p><p>模糊半径用来控制阴影边缘模糊区域的大小，可以为阴影生成一个更柔和、有点透明的边缘。</p><p>扩展半径用来控制阴影的大小，设置为正值可以使阴影全方位变大，设为负值则会变小。</p><h2 id="混合模式" tabindex="-1">混合模式 <a class="header-anchor" href="#混合模式" aria-label="Permalink to &quot;混合模式&quot;">​</a></h2><p>大部分情况下，不论是使用真正的图片还是渐变，元素一般只会使用一张背景图片。但某些情况下你可能想要使用两张或者更多的背景图片，CSS是支持这么做的。</p><p><img src="https://res.weread.qq.com/wrepub/epub_31594821_401" alt="混合模式"></p><p>在本例中，bear.jpg会遮盖在线性渐变之上，渐变就会不可见。而如果我们使用两张背景图片，那么一般是希望第二张图片也可以透视显示。这时就可以使用混合模式（blend mode）。</p><blockquote><p>如果一张背景图片有一些透明度，即使不使用混合模式，在它下方的其他背景也会通过透明区域显现出来。你可以用一张透明的png或者gif图片试一下，或者使用渐变，但是把transparent关键字设置为其中一个颜色节点。</p></blockquote><p><img src="https://res.weread.qq.com/wrepub/epub_31594821_404" alt="多背景"></p><p>大部分背景相关的属性可以接受多个值，以逗号分隔。background-position就使用了两个值，第一个值会应用到第一张背景图片上，第二个值会应用到第二张背景图片上。background-size和background-repeat属性也可以接受多个值，但如果只设置一个值，就会应用到所有的背景图片上。这里使用了min-height属性，是为了确保元素不会显示成高度为0（因为是空元素）。</p><h2 id="对比、颜色和间距" tabindex="-1">对比、颜色和间距 <a class="header-anchor" href="#对比、颜色和间距" aria-label="Permalink to &quot;对比、颜色和间距&quot;">​</a></h2><p>转化工作完成之后，任务到了你身上，作为开发者，你需要基于设计师的构想，继续开发网站。你至少应该有一些设计师的基本思维，从设计师的角度去思考间距、颜色和排版等，这很重要。你需要了解如何确保最终实现的效果是准确的。如果你认可设计师的目标，那整个过程就会比较顺利。</p><h3 id="颜色" tabindex="-1">颜色 <a class="header-anchor" href="#颜色" aria-label="Permalink to &quot;颜色&quot;">​</a></h3><p><img src="https://res.weread.qq.com/wrepub/epub_31594821_404" alt="颜色"></p><p>这里我们对颜色使用了自定义变量。使用变量以后，一旦后续需要修改这些值，就会很省事。</p><p>到后期了，设计师决定调整品牌颜色。我只需要在一个地方修改一下变量，非常简单，但实际上已经修改了代码里所有用到变量的地方。</p><p>颜色表示法：</p><p><img src="https://res.weread.qq.com/wrepub/epub_31594821_431" alt="颜色"></p><p>应用的颜色都显示在开发者工具的Styles面板中，按住Shift并点击颜色值旁边的小方块，可以循环展示十六进制、RGB和HSL表示法。</p><p>单击小方块可以打开一个全色选择器对话框，然后你就可以更精细地调整颜色，也可以从调色板中选择颜色，或者切换十六进制、RGB和HSL表示法。对话框里还包含一个滴管工具，可以直接从页面里提取颜色。</p><h3 id="间距" tabindex="-1">间距 <a class="header-anchor" href="#间距" aria-label="Permalink to &quot;间距&quot;">​</a></h3><h2 id="排版" tabindex="-1">排版 <a class="header-anchor" href="#排版" aria-label="Permalink to &quot;排版&quot;">​</a></h2><p>网页设计，成也字体，败也字体。几年前，Web开发者只能从有限的一些字体中做选择，即所谓的Web安全字体（Web safe font）。这些字体类型包括Arial、Helvetica、Georgia等，大部分用户的系统会安装。</p><p>随着Web字体的兴起，情况改变了。Web字体使用@font-face规则，告诉浏览器去哪里找到并下载自定义字体，供页面使用。原本平淡无奇的页面，使用自定义字型之后，可能就改观了。这仿佛打开了一个新世界，我们比过去多了非常多的选择。</p><h3 id="web字体" tabindex="-1">web字体 <a class="header-anchor" href="#web字体" aria-label="Permalink to &quot;web字体&quot;">​</a></h3><p>通过在线服务使用Web字体是最简单也最普遍的方式。常见的如下所示。</p><p>❑ Typekit</p><p>❑ Webtype</p><p>❑ 谷歌字体</p><p><img src="https://res.weread.qq.com/wrepub/epub_31594821_464" alt="字体"></p><h3 id="font-face" tabindex="-1">@font-face <a class="header-anchor" href="#font-face" aria-label="Permalink to &quot;@font-face&quot;">​</a></h3><p><img src="https://res.weread.qq.com/wrepub/epub_31594821_465" alt="font-face"></p><h3 id="字间距" tabindex="-1">字间距 <a class="header-anchor" href="#字间距" aria-label="Permalink to &quot;字间距&quot;">​</a></h3><p>为line-height和letter-spacing找到合适的值是件主观性很强的事情。最好的解决办法通常是多试几个值，如果两个值要么太紧凑要么太松散，那就取它们的中间值。幸运的是，下面介绍的这些经验法则可以为你提供帮助。</p><p>line-height属性的初始值是关键字normal，大约等于1.2（确切的数值是在字体文件中编码的，取决于字体的em大小），但是在大部分情况下，这个值太小了。对于正文主体来说，介于1.4和1.6之间的值比较理想。</p><p>我letter-spacing。这个属性需要一个长度值，用来设置每个字符之间的距离。即使只设置1px，也是很夸张的字间距了，因此这应该是个很小的长度值。我在尝试找到合适值的时候，一般每次只增加1em的1/100（例如，letter-spacing: 0.01em）。</p><h3 id="fout和foit" tabindex="-1">FOUT和FOIT <a class="header-anchor" href="#fout和foit" aria-label="Permalink to &quot;FOUT和FOIT&quot;">​</a></h3><p>比起系统字体，Web字体很可能会在屏幕上占据不一样的空间。第二次渲染时，页面布局变了，文字突然跳动了。如果这是在第一次渲染之后很快发生，用户可能不会注意到。但是如果字体下载过程中有网络延迟（或者字体文件太大了），可能长达几秒之后才会再次渲染页面。这种情况发生时，有的用户可能会感到厌烦。他们可能已经开始阅读网页内容了，这时页面突然变化，会让他们注意力分散。这就是所谓的FOUT，即无样式文本闪动（Flash ofUnstyled Text）。</p><p>因为开发者们不喜欢这样，所以大部分浏览器供应商修改了浏览器的行为。他们不再渲染回退字体，改成渲染页面上除了文本以外的其他所有元素。确切地说，他们把文本渲染成不可见的，因此文字依然会占据页面的空间。通过这种方式，页面的容器元素得以实现，用户就可以看到页面正在加载。这就导致了一个新的问题，FOIT，即不可见文本闪动（Flash ofInvisible Text）背景颜色和边框都显示出来了，但是文字在第二次渲染的时候<code>才显示</code>，即Web字体加载之后。</p><h2 id="过渡transition" tabindex="-1">过渡transition <a class="header-anchor" href="#过渡transition" aria-label="Permalink to &quot;过渡transition&quot;">​</a></h2><p>过渡是通过一系列transition-＊属性来实现的。如果某个元素设置了过渡，那么当它的属性值发生变化时，并不是直接变成新值，而是使用过渡效果。</p><p><img src="https://res.weread.qq.com/wrepub/epub_31594821_488" alt="过渡"></p><p>transition-property这个属性可以指定哪些属性使用过渡。在示例中，关键字all意味着所有的属性变化都使用过渡。transition-duration属性代表过渡到最终值之前需要多长时间，本例中设置为0.5s，代表0.5s。</p><p>也可以使用简写属性transition，该简写属性接受四个参数值，分别代表四个过渡属性transition-property、transition-duration、transition-timing-function和transition-delay。</p><p><img src="https://res.weread.qq.com/wrepub/epub_31594821_489" alt="过渡"></p><p>第一个值设置了哪个属性需要过渡，初始值是关键字all，表示所有属性都生效。如果只有某个属性需要过渡，在这里指定属性即可。例如transition-property: color将只应用在元素的颜色上，其他属性会立刻发生变化。也可以设置多个值，比如transition-property:color,font-size。</p><p>第二个值是持续时间，是一个用秒（例如0.3s）或者毫秒（300ms）表示的时间值。警告跟长度值不太一样，0不是一个有效的时间值。你必须为时间值添加一个单位（0s或者0ms），否则声明将无效，并被浏览器忽略。</p><p>第三个值是定时函数，用来控制属性的中间值如何计算，实际上控制的是过渡过程中变化率如何加速或者减速。定时函数可以是一个关键字值，比如linear或者ease-in，也可以是自定义函数。</p><p>最后一个值是延迟时间，允许开发者在属性值改变之后过渡生效之前设置一个等待周期。如果你为按钮的悬停状态设置0.5s的过渡延迟，那么在鼠标指针进入元素<code>0.5s之后</code>才会开始发生变化。</p><p>如果需要为两个不同的属性分别设置不同的过渡，可以添加多个过渡规则，以逗号分隔。</p><p><img src="https://res.weread.qq.com/wrepub/epub_31594821_490" alt="多个属性"></p><h3 id="不可添加动画效果的属性" tabindex="-1">不可添加动画效果的属性 <a class="header-anchor" href="#不可添加动画效果的属性" aria-label="Permalink to &quot;不可添加动画效果的属性&quot;">​</a></h3><p>不是所有属性都可以添加动画效果，display属性就是其中之一。你可以在display: none和display: block之间切换，但不能在这两个值之间过渡，因此，任何应用到display上的过渡属性都会被忽略。</p><blockquote><p>大部分的接受长度值、数值、颜色值或者calc()函数值的属性可以添加动画效果；大部分的使用关键字或者其他非连续性值的属性（比如url()）不可以使用动画。</p></blockquote><p>如果你查阅过display属性，你会发现它的动画类型是discrete，这就意味着它只能被赋予非连续性的值，不能在动画或者过渡中做插值计算。我们这里要实现元素的淡入淡出，就不能使用display属性了，但我们可以使用opacity属性。</p><p><img src="https://res.weread.qq.com/wrepub/epub_31594821_506" alt="opacity"></p><p>我们需要为透明度添加过渡，但同时需要在菜单抽屉不可见时彻底移除它。可以借助另一个属性visibility来实现。</p><p>visibility属性可以从页面上移除某个元素，有点类似于display属性，分别设置visible和hidden即可。但跟display不同的是，visibility可以支持动画。为它设置过渡不会使其逐渐消失，但transition-delay可以生效，而在display属性上是不生效的。</p><blockquote><p>为某个元素设置visibility: hidden可以从可见页面中移除该元素，但不会从文档流中移除它，这就意味着该<code>元素仍然占位</code>。其他元素会继续围绕该元素的位置布局，在页面上保留一个空白区域。在我们的例子中，不会影响到菜单，因为我们同时也设置了绝对定位。</p></blockquote><h2 id="变换transform" tabindex="-1">变换transform <a class="header-anchor" href="#变换transform" aria-label="Permalink to &quot;变换transform&quot;">​</a></h2><p>transform属性，它可以用来改变页面元素的形状和位置，其中包括二维或者三维的旋转、缩放和倾斜。</p><p><img src="https://res.weread.qq.com/wrepub/epub_31594821_512" alt="旋转"></p><h3 id="旋转rotate" tabindex="-1">旋转Rotate <a class="header-anchor" href="#旋转rotate" aria-label="Permalink to &quot;旋转Rotate&quot;">​</a></h3><p>元素绕着一个轴心转动一定角度。</p><p>rotate(15deg) —— 旋转15度。使用负角度可以使卡片向左旋转（可以尝试rotate(-30deg)）。</p><h3 id="平移traslate" tabindex="-1">平移Traslate <a class="header-anchor" href="#平移traslate" aria-label="Permalink to &quot;平移Traslate&quot;">​</a></h3><p>元素向上、下、左、右各个方向移动（有点类似于相对定位）。</p><p>translate(20px, 40px) —— 使元素向右移动20px，向下移动40px。同样，也可以使用负值使元素向相反的方向变换。</p><h3 id="缩放scale" tabindex="-1">缩放Scale <a class="header-anchor" href="#缩放scale" aria-label="Permalink to &quot;缩放Scale&quot;">​</a></h3><p>缩小或放大元素。</p><p>scale(0.5) —— 将卡片缩小至初始大小的一半。scale()函数需要一个无单位的数值，小于1表示要缩小元素，大于1表示要放大元素。</p><h3 id="倾斜skew" tabindex="-1">倾斜Skew <a class="header-anchor" href="#倾斜skew" aria-label="Permalink to &quot;倾斜Skew&quot;">​</a></h3><p>使元素变形，顶边滑向一个方向，底边滑向相反的方向。</p><p>skew(20deg)——使卡片倾斜20度。试试负角度，让卡片向其他方向倾斜。</p><blockquote><p>警告：变换不能作用在<code>&lt;span&gt;</code>或者<code>&lt;a&gt;</code>这样的行内元素上。若确实要变换此类元素，要么改变元素的display属性，替换掉inline（比如inline-block），要么把元素改为弹性子元素或者网格项目（为父元素应用<code>display: flex</code>或者<code>display: grid</code>）。</p></blockquote><h3 id="基点transform-origin" tabindex="-1">基点transform-origin <a class="header-anchor" href="#基点transform-origin" aria-label="Permalink to &quot;基点transform-origin&quot;">​</a></h3><p>变换是围绕基点（point of origin）发生的。基点是旋转的轴心，也是缩放或者倾斜开始的地方。这就意味着元素的基点是固定在某个位置上，元素的剩余部分围绕基点变换（但translate()是个例外，因为平移过程中元素整体移动）。</p><p>可以通过transform-origin属性改变基点位置。</p><p><img src="https://res.weread.qq.com/wrepub/epub_31594821_517" alt="transform-origin"></p><p>左侧的元素绕基点旋转，其基点设置为transform-origin: right bottom；中间的元素向着基点（right top）缩放；右侧元素的倾斜方式是，基点（left top）保持不动，元素其他部分向远处延伸。</p><p>基点也可以指定为百分比，从元素左上角开始测量。下面的两句声明是等价的。</p><p><img src="https://res.weread.qq.com/wrepub/epub_31594821_518" alt="transform-origin"></p><p>也可以使用px、em或者其他单位的长度值来指定基点。按照我的经验，使用top、right、bottom、left和center这些关键字，在大部分项目中就够用了。</p><h3 id="多重变换" tabindex="-1">多重变换 <a class="header-anchor" href="#多重变换" aria-label="Permalink to &quot;多重变换&quot;">​</a></h3><p>可以对transform属性指定多个值，用空格隔开。变换的每个值<code>从右向左</code>按顺序执行，比如我们设置transform: rotate(15deg)translate(15px, 0)，元素会先向右平移15px，然后顺时针旋转15度。</p><p><img src="https://res.weread.qq.com/wrepub/epub_31594821_519" alt="多重变换"></p><p>理解起来可能有点儿困难。通常把translate()放在最后执行（在transform代码顺序中需要放在首位），这样可以使用正常的上/下、左/右坐标系，操作更简便。</p><h3 id="动画性能" tabindex="-1">动画性能 <a class="header-anchor" href="#动画性能" aria-label="Permalink to &quot;动画性能&quot;">​</a></h3><p>浏览器计算好了页面上哪些样式应用于哪些元素上之后，需要把这些样式转化成屏幕上的像素，这个过程叫作渲染（rending）。渲染可以分为三个阶段：布局、绘制和合成。</p><p><img src="https://res.weread.qq.com/wrepub/epub_31594821_535" alt="绘制"></p><h4 id="_1-布局" tabindex="-1">1.布局 <a class="header-anchor" href="#_1-布局" aria-label="Permalink to &quot;1.布局&quot;">​</a></h4><p>在第一个阶段布局中，浏览器需要计算每个元素将在屏幕上占多大空间。因为文档流的工作方式，所以一个元素的大小和位置可以影响页面上无数其他元素的大小和位置。这个阶段会解决这个问题。任何时候改变一个元素的宽度或高度，或者调整位置属性（比如top或者left），元素的布局都会重新计算。</p><p>如果使用JavaScript在DOM中插入或者移除元素，也会重新计算布局。一旦布局发生改变，浏览器就必须<code>重排（reflow）页面</code>，重新计算所有其他被移动或者缩放的元素的布局。</p><h4 id="_2-绘制" tabindex="-1">2.绘制 <a class="header-anchor" href="#_2-绘制" aria-label="Permalink to &quot;2.绘制&quot;">​</a></h4><p>布局之后是绘制。这个过程就是填充像素：描绘文本，着色图片、边框和阴影。这不会真正显示在屏幕上，而是在内存中绘制。页面各部分生成了很多的图层（layers）。如果改变某个元素的背景颜色，就必须重新绘制它。但因为更改背景颜色不会影响到页面上任何元素的位置和大小，所以这种变化不需要重新计算布局。改变背景颜色比改变元素大小需要的计算操作要少。</p><p>某些条件下，页面元素会被提取到自己的图层。这时候，它会从页面的其他图层中独立出来单独绘制。浏览器把这个图层发送到计算机的图形处理器（graphics processing unit,GPU）进行绘制，而不是像主图层那样使用主CPU绘制。这样安排是有好处的，因为GPU经过了充分的优化，比较适合做这类计算。这就是我们经常提到的硬件加速（hardwareacceleration），因为需要依赖于计算机上的某些硬件来推进渲染速度。多个图层就意味着需要消耗更多的内存，但好处是可以加快渲染。</p><h4 id="_3-合成" tabindex="-1">3.合成 <a class="header-anchor" href="#_3-合成" aria-label="Permalink to &quot;3.合成&quot;">​</a></h4><p>在合成（composite）阶段，浏览器收集所有绘制完成的图层，并把它们提取为最终显示在屏幕上的图像。合成过程需要按照特定顺序进行，以确保图层出现重叠时，正确的图层显示在其他图层之上。</p><p>opacity和transform这两个属性如果发生改变，需要的渲染时间就会非常少。当我们修改元素的这两个属性之一时，浏览器就会把元素提升到其自己的绘制图层并使用GPU加速。因为元素存在于自己的图层，所以整个图像变化过程中主图层将不会发生变化，也无须重复的重绘。</p><p>如果只是对页面做一次性修改，那么通常不会感觉出这种优化可以带来明显的差异。但如果修改的是动画的一部分，屏幕需要在一秒内发生多达几十次的更新，这种情况下渲染速度就很重要了。大部分的屏幕每秒钟会刷新60次。理想情况下，动画中每次变化所需的重新计算也要至少这么快，才能在屏幕上生成最流畅的运动轨迹。浏览器在每次重新计算的时候需要做的事情越多，越难达到这种速度。</p><blockquote><p>浏览器会尽可能把一些元素划归到不同的图层，这已经在优化渲染流程上取得了明显的进步。如果你对一个元素的transform或者opacity属性设置动画，现代浏览器为了使动画过程更加流畅，通常会基于包括系统资源在内的一系列因素，做出最佳处理，但有时候你可能会遇到突变或闪烁的动画。如果碰到这种情况，你可以使用一个叫作will-change的属性对渲染图层添加控制。这个属性可以提前告知浏览器，元素的特定属性将改变。这通常意味着元素将被提升到自己的绘制图层。例如，设置了will-change:transform就表示我们将要改变元素的transform属性。</p></blockquote><p>处理过渡或者动画的时候，尽量只改变transform和opacity属性。如果有需要，可以修改那些只导致重绘而不会重新布局的属性。只有在没有其他替代方案的时候，再去修改那些影响布局的属性，并且密切关注动画中是否存在性能问题。如果想要查看哪些属性会导致布局、绘制或者合成，可以访问CSS Triggers网站。</p><h3 id="三维-3d-变换" tabindex="-1">三维（3D）变换 <a class="header-anchor" href="#三维-3d-变换" aria-label="Permalink to &quot;三维（3D）变换&quot;">​</a></h3><p>目前为止我们使用过的变换都是2D的。这些变换容易使用（也很常见），因为网页本身就是2D的。但我们不应该被局限在这里，旋转和平移都可以在三个维度上实现：X轴、Y轴和Z轴。</p><p>我们可以像之前那样使用translate()函数，在水平和垂直方向上平移（X轴和Y轴）。也可以使用translateX()和translateY()函数实现同样的效果。下面两条声明会产生同样的效果。</p><p><img src="https://res.weread.qq.com/wrepub/epub_31594821_536" alt="translate"> 我们同样可以使用translateZ()函数实现Z轴上的平移，相当于移动元素使其更靠近或远离用户。同样，也可以使元素绕着三个不同维度的坐标轴进行旋转。但和平移不同的是，我们已经非常熟悉rotateZ()了，<code>因为rotate()就可以被称为rotateZ()，它就是绕着Z轴旋转的。</code>函数rotateX()和rotateY()分别围绕着水平方向上的X轴（使元素向前或者向后倾斜）和垂直方向上的Y轴（使元素向左或者向右转动或偏移）旋转。</p><p><img src="https://res.weread.qq.com/wrepub/epub_31594821_537" alt="3D变换"></p><h4 id="控制透视距离" tabindex="-1">控制透视距离 <a class="header-anchor" href="#控制透视距离" aria-label="Permalink to &quot;控制透视距离&quot;">​</a></h4><p>为页面添加3D变换之前，我们需要先确定一件事情，即透视距离（perspective）。变换后的元素一起构成了一个3D场景。接着浏览器会计算这个3D场景的2D图像，并渲染到屏幕上。我们可以把透视距离想象成“摄像机”和场景之间的距离，前后移动镜头就会改变整个场景最终显示到图像上的方式。</p><p>如果镜头比较近（即透视距离小），那么3D效果就会比较强。如果镜头比较远（即透视距离大），那么3D效果就会比较弱。</p><p><img src="https://res.weread.qq.com/wrepub/epub_31594821_538" alt="透视距离"></p><p>左侧这个旋转后的元素，没有设置透视距离，看起来不太像是3D的。它只是水平方向上做了一些压缩，没有立体感。不设置透视距离的3D变换看上去像是平的，“向远处转”的那部分元素没有显得变小。中间这个盒子，设置了400px的透视距离。它的右侧边，即距离观察者较远的这一侧，显得有点变小，距离较近的这一侧看上去变大了一些。右侧盒子设置了更短的透视距离，是100px。这样加强了3D效果，元素的边缘越远，缩小得越明显。</p><p>可以通过两种方式指定透视距离：使用perspective()变换或者使用perspective属性。</p><p><img src="https://res.weread.qq.com/wrepub/epub_31594821_543" alt="perspective"></p><h3 id="高级3d变化" tabindex="-1">高级3D变化 <a class="header-anchor" href="#高级3d变化" aria-label="Permalink to &quot;高级3D变化&quot;">​</a></h3><h4 id="perspective-origin属性" tabindex="-1">perspective-origin属性 <a class="header-anchor" href="#perspective-origin属性" aria-label="Permalink to &quot;perspective-origin属性&quot;">​</a></h4><p>默认情况下，透视距离的渲染是假设观察者（或者镜头）位于元素中心的正前方。perspective-origin属性可以上下、左右移动镜头的位置。 <img src="https://res.weread.qq.com/wrepub/epub_31594821_545" alt="perspective-origin"></p><p>还是跟之前一样的透视距离，但是视角变了，所有的盒子都移到了观察者的右侧。我们可以使用关键字top、left、bottom、right和center来指定位置，也可以使用百分比或者长度值，从元素的左上角开始计算（比如perspective-origin: 25% 25%）。</p><h4 id="backface-visibility属性" tabindex="-1">backface-visibility属性 <a class="header-anchor" href="#backface-visibility属性" aria-label="Permalink to &quot;backface-visibility属性&quot;">​</a></h4><p>如果你使用rotateX()或者rotateY()旋转元素超过90度，就会发现一些有趣的事情：元素的“脸”不再直接朝向你。它的“脸”转向别的地方，你会看到元素的<code>背面</code>。元素设置了rotateY(180deg)的变换，它看起来就像是之前元素的镜像图片。</p><p><img src="https://res.weread.qq.com/wrepub/epub_31594821_546" alt="rotateY"></p><p>这就是元素的背面。默认情况下背面是可见的，但我们可以为元素设置backface-visibility:hidden来改变它。添加这条声明之后，<code>元素只有在正面朝向观察者的时候才可见，</code>朝向别处的时候不可见。针对这项技术，一个可能的应用场景是把两个<code>元素背靠背</code>放在一起，就像卡片的两面。卡片的正面展示出来，背面隐藏。然后我们可以旋转它们的容器元素，使这两个元素都翻转过来，这样正面隐藏背面显现。</p><h4 id="transform-style-preserve-3d-属性" tabindex="-1">transform-style（preserve-3d）属性 <a class="header-anchor" href="#transform-style-preserve-3d-属性" aria-label="Permalink to &quot;transform-style（preserve-3d）属性&quot;">​</a></h4><p>如果你要使用嵌套元素构建复杂的3D场景，transform-style属性就变得非常重要。现在假设我们已经对容器设置了透视距离，接下来对容器内的元素进行3D变换。容器元素渲染时，实际上会被绘制成2D场景，就像是3D对象的一张照片。这看起来没什么问题，因为元素最终就是要渲染到2D屏幕上的。</p><p>如果接下来我们对容器元素进行3D旋转，就有问题了。这是因为实际上没有对整个场景进行旋转，只是旋转3D场景的2D照片。透视距离全都错了，场景中的立体感也被破坏了。</p><p><img src="https://res.weread.qq.com/wrepub/epub_31594821_547" alt="3D"></p><p>通过把六个面变换到相应位置创建一个3D立方体。中间的图片展示的是对整个立方体（即它们的父元素）使用变换会发生什么。为了改正这个问题，我们应该对父元素使用transform-style: preserve-3d。</p><p>// TODO: 实现一个3D的正方体，支持旋转，看到六个面。<a href="https://www.cnblogs.com/libo-web/p/15705584.html" target="_blank" rel="noreferrer">https://www.cnblogs.com/libo-web/p/15705584.html</a></p><h2 id="动画animation" tabindex="-1">动画animation <a class="header-anchor" href="#动画animation" aria-label="Permalink to &quot;动画animation&quot;">​</a></h2><p>过渡是直接从一个地方变换到另一个地方，相比之下，我们可能希望某个元素的变化过程是迂回的路径。有时，我们可能需要元素在动画运动后再回到起始的地方。这些事情无法使用过渡来实现。为了对页面变化有更加精确的控制，CSS提供了关键帧动画。</p><p>关键帧（keyframe）是指动画过程中某个特定时刻。我们定义一些关键帧，浏览器负责填充或者插入这些关键帧之间的帧图像。</p><p><img src="https://res.weread.qq.com/wrepub/epub_31594821_548" alt="keyframe"></p><p>从原理上看，过渡其实和关键帧动画类似：我们定义第一帧（起始点）和最后一帧（结束点），浏览器计算所有中间值，使得元素可以在这些值之间平滑变换。但使用关键帧动画，我们就不再局限于只定义两个点，而是想加多少加多少。浏览器负责填充一个个点与点之间的值，直到最后一个关键帧，最终生成一系列无缝衔接的过渡。</p><h3 id="关键帧" tabindex="-1">关键帧 <a class="header-anchor" href="#关键帧" aria-label="Permalink to &quot;关键帧&quot;">​</a></h3><p>CSS中的动画包括两部分：用来定义动画的@keyframes规则和为元素添加动画的animation属性。</p><p><img src="https://res.weread.qq.com/wrepub/epub_31594821_549" alt="@keyframes"></p><p>动画对background-color和transform这两个属性做了一些改动。</p><p><img src="https://res.weread.qq.com/wrepub/epub_31594821_550" alt="关键帧"></p><p>关键帧动画都需要名称，示例中的动画被命名为over-and-back。动画中使用百分比定义了三个关键帧。这些百分比代表每个关键帧发生于动画过程中的哪些时刻：一个在动画的开始（0%），一个在中间（50%），一个在终点（100%）。每个关键帧块内的声明定义了当前关键帧的样式。</p><p><img src="https://res.weread.qq.com/wrepub/epub_31594821_552" alt="应用动画"></p><p>animation属性是4个属性的简写：</p><p>❑ animation-name（over-and-back）—— 代表动画名称，就像@keyframes规则定义的那样。</p><p>❑ animation-duration（1.5s）—— 代表动画持续时间，在本例中是1.5s。</p><p>❑ animation-timing-function（linear）—— 代表定时函数，用来描述动画如何加速和/或减速。可以是贝塞尔曲线或者关键字值，就像过渡使用的定时函数一样（ease-in、ease-out，等等）。</p><p>❑ animation-iteration-count（3）—— 代表动画重复的次数。初始值默认是1，可设置infinite表示无限循环。</p>',201),i=[o];function s(n,c,l,d,h,b){return e(),r("div",null,i)}const q=a(p,[["render",s]]);export{m as __pageData,q as default};
