import{_ as s,v as n,b as a,R as l}from"./chunks/framework.caa0fbaf.js";const d=JSON.parse('{"title":"npm 和 pnpm","description":"","frontmatter":{},"headers":[],"relativePath":"1-前端开发/1-随笔/17-npm和pnpm.md","filePath":"1-前端开发/1-随笔/17-npm和pnpm.md","lastUpdated":1708595959000}'),p={name:"1-前端开发/1-随笔/17-npm和pnpm.md"},e=l(`<h1 id="npm-和-pnpm" tabindex="-1">npm 和 pnpm <a class="header-anchor" href="#npm-和-pnpm" aria-label="Permalink to &quot;npm 和 pnpm&quot;">​</a></h1><h2 id="npm扁平化" tabindex="-1">npm扁平化 <a class="header-anchor" href="#npm扁平化" aria-label="Permalink to &quot;npm扁平化&quot;">​</a></h2><p>通过 npm 生成的 node_modules 结构通常是一个「扁平化 的目录结构」，其中包含项目的所有依赖项。当您使用 npm 安装项目的依赖项时，相关的包将直接安装到项目的 node_modules 目录中。例如，假设你的项目依赖于包 A 和包 B，它们的安装目录结构可能如下所示：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">Project</span></span>
<span class="line"><span style="color:#A6ACCD;">└── node_modules</span></span>
<span class="line"><span style="color:#A6ACCD;">    ├── </span><span style="color:#89DDFF;font-style:italic;">package</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">A</span></span>
<span class="line"><span style="color:#A6ACCD;">    └── </span><span style="color:#89DDFF;font-style:italic;">package</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">B</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// node_modules 结构是扁平化的，但每个依赖项的包内部结构可能是嵌套的</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>缺点：</p><ul><li>冗余依赖项</li></ul><p>由于每个依赖项都被直接放置在 node_modules 目录下，如果多个依赖项依赖于同一个包的不同版本，那么这个包将会在 node_modules 目录下重复出现多次，造成了冗余的存储。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">Project</span></span>
<span class="line"><span style="color:#A6ACCD;">└── node_modules</span></span>
<span class="line"><span style="color:#A6ACCD;">    ├── </span><span style="color:#89DDFF;font-style:italic;">package</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">A</span></span>
<span class="line"><span style="color:#A6ACCD;">    │   └── node_modules</span></span>
<span class="line"><span style="color:#A6ACCD;">    │       └── shared</span><span style="color:#89DDFF;">-</span><span style="color:#89DDFF;font-style:italic;">package</span><span style="color:#A6ACCD;">@</span><span style="color:#F78C6C;">1.0</span><span style="color:#89DDFF;">.</span><span style="color:#F78C6C;">0</span></span>
<span class="line"><span style="color:#A6ACCD;">    └── </span><span style="color:#89DDFF;font-style:italic;">package</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">B</span></span>
<span class="line"><span style="color:#A6ACCD;">        └── node_modules</span></span>
<span class="line"><span style="color:#A6ACCD;">            └── shared</span><span style="color:#89DDFF;">-</span><span style="color:#89DDFF;font-style:italic;">package</span><span style="color:#A6ACCD;">@</span><span style="color:#F78C6C;">2.0</span><span style="color:#89DDFF;">.</span><span style="color:#F78C6C;">0</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><ul><li>磁盘占用</li></ul><p>由于每个依赖项都被直接放置在 node_modules 目录下，即使同一个依赖项在不同的包中重复出现，也会占用额外的磁盘空间</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">Project</span></span>
<span class="line"><span style="color:#A6ACCD;">└── node_modules</span></span>
<span class="line"><span style="color:#A6ACCD;">    ├── </span><span style="color:#89DDFF;font-style:italic;">package</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">A</span></span>
<span class="line"><span style="color:#A6ACCD;">    │   └── node_modules</span></span>
<span class="line"><span style="color:#A6ACCD;">    │       └── shared</span><span style="color:#89DDFF;">-</span><span style="color:#89DDFF;font-style:italic;">package</span><span style="color:#A6ACCD;">@</span><span style="color:#F78C6C;">1.0</span><span style="color:#89DDFF;">.</span><span style="color:#F78C6C;">0</span></span>
<span class="line"><span style="color:#A6ACCD;">    └── </span><span style="color:#89DDFF;font-style:italic;">package</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">B</span></span>
<span class="line"><span style="color:#A6ACCD;">        └── node_modules</span></span>
<span class="line"><span style="color:#A6ACCD;">            └── shared</span><span style="color:#89DDFF;">-</span><span style="color:#89DDFF;font-style:italic;">package</span><span style="color:#A6ACCD;">@</span><span style="color:#F78C6C;">1.0</span><span style="color:#89DDFF;">.</span><span style="color:#F78C6C;">0</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h2 id="npm优化" tabindex="-1">npm优化 <a class="header-anchor" href="#npm优化" aria-label="Permalink to &quot;npm优化&quot;">​</a></h2><p>npm v3（2015年）是 npm 包管理器的一个重要里程碑，引入了一些重大的变化和改进！</p><ol><li>扁平化依赖：npm v3 引入了「扁平化依赖」的概念（npm v5 做了完善和优化），即将依赖项的多个版本共享在一个统一的层次结构中。这样可以避免传统的嵌套依赖结构，减少了冗余和冲突，从而降低了项目的磁盘空间占用和安装时间。</li></ol><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">Project</span></span>
<span class="line"><span style="color:#A6ACCD;">└── node_modules</span></span>
<span class="line"><span style="color:#A6ACCD;">    ├── </span><span style="color:#89DDFF;font-style:italic;">package</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">A</span></span>
<span class="line"><span style="color:#A6ACCD;">    ├── </span><span style="color:#89DDFF;font-style:italic;">package</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">B</span></span>
<span class="line"><span style="color:#A6ACCD;">    ├── shared</span><span style="color:#89DDFF;">-</span><span style="color:#89DDFF;font-style:italic;">package</span><span style="color:#A6ACCD;">@</span><span style="color:#F78C6C;">1.0</span><span style="color:#89DDFF;">.</span><span style="color:#F78C6C;">0</span></span>
<span class="line"><span style="color:#A6ACCD;">    └── shared</span><span style="color:#89DDFF;">-</span><span style="color:#89DDFF;font-style:italic;">package</span><span style="color:#A6ACCD;">@</span><span style="color:#F78C6C;">2.0</span><span style="color:#89DDFF;">.</span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// npm v5 才能做到</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><ol start="2"><li>并行安装</li></ol><p>问题：</p><ol><li><p>npm v3 这种「扁平化依赖」的思想虽然有效避免了冗余的依赖项，但也使得项目/包可以访问到并不依赖的包，可能产生安全问题 ➡️「幽灵依赖」。因为相同依赖包被提升到了顶层，所以整个项目都可以访问该依赖，但是package.json可能并没有声明。</p></li><li><p>不同包依赖同一个包的版本不同时，多个版本的包只能有一个被提升上来，其余版本的包会嵌套安装到各自的依赖当中，哪个版本的包被提升，依赖于包的安装顺序。</p></li></ol><h2 id="pnpm" tabindex="-1">pnpm <a class="header-anchor" href="#pnpm" aria-label="Permalink to &quot;pnpm&quot;">​</a></h2><p>「pnpm」的主要特点之一是它使用一种称为「虚拟化节点模块」的技术来管理依赖项。它通过在单个磁盘位置存储依赖项的多个版本来减少磁盘占用空间，并通过「软连接 — 符号链接」将它们正确引用到项目中，这种方法还可以加快安装和更新依赖项的速度！</p><h3 id="store" tabindex="-1">store <a class="header-anchor" href="#store" aria-label="Permalink to &quot;store&quot;">​</a></h3><p>pnpm 有一个 store 的概念（为了方便记忆，可以联想成 Vuex 的 store，全局状态管理），store 目录内部使用「基于内容寻址」的文件系统来存储磁盘上所有的文件。</p><p>基于内容寻址是一种文件系统的设计原则，以文件内容的哈希值作为文件的唯一标识符，并将文件存储在以哈希值命名的目录中。这样的设计使得相同内容的文件只会存储一次，避免了重复存储相同文件的问题。</p><p><img src="https://s11.ax1x.com/2024/02/22/pFNsQyj.png" alt="store"></p><h3 id="link" tabindex="-1">link <a class="header-anchor" href="#link" aria-label="Permalink to &quot;link&quot;">​</a></h3><h4 id="_1-硬链接hard-link" tabindex="-1">1. 硬链接hard link <a class="header-anchor" href="#_1-硬链接hard-link" aria-label="Permalink to &quot;1. 硬链接hard link&quot;">​</a></h4><p>硬链接就是同一个文件的一个或多个文件名，它所引用的是文件的物理数据而不是文件在文件结构中的位置，使得用户可以通过不同的路径引用方式去找到某个文件。pnpm 会在全局的 store 目录里存储项目 node_modules 文件的硬连接。但是，硬链接只能用于文件不能用于目录（可能导致目录循环）。</p><p>硬链接的特点是，无论有多少个硬链接指向相同的数据块，它们都被视为相互独立的完整文件副本。因此，硬链接不会占用额外的磁盘空间，因为它们共享相同的数据块。</p><h4 id="_2-软链接symbolic-link" tabindex="-1">2. 软链接symbolic link <a class="header-anchor" href="#_2-软链接symbolic-link" aria-label="Permalink to &quot;2. 软链接symbolic link&quot;">​</a></h4><p>软链接，又称为符号链接，是一个指向另一个文件或目录的引用，类似于创建一个快捷方式。与硬链接不同，软链接创建的链接文件保存的是被链接文件的「路径信息」，而不是实际的文件内容或索引节点。当访问软链接时，操作系统会跟随链接并转到被链接的文件或目录。</p><p>硬链接指向物理资源，软链接则是指向硬链接。</p><h3 id="pnpm-1" tabindex="-1">.pnpm <a class="header-anchor" href="#pnpm-1" aria-label="Permalink to &quot;.pnpm&quot;">​</a></h3><p>.pnpm/ 为虚拟磁盘目录，它以平铺的形式储存着所有的包。pnpm 使用「软链接 + 平铺」目录结合的方式来构建一个嵌套结构： <img src="https://s11.ax1x.com/2024/02/22/pFNsRpD.png" alt=".pnpm"></p><h3 id="依赖包寻址" tabindex="-1">依赖包寻址 <a class="header-anchor" href="#依赖包寻址" aria-label="Permalink to &quot;依赖包寻址&quot;">​</a></h3><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">node_modules</span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;">f </span><span style="color:#676E95;font-style:italic;">// 在 node_modules 文件夹寻找依赖，并遵循就近原则</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">—</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> 软链接 node_modules</span><span style="color:#89DDFF;">/.</span><span style="color:#A6ACCD;">pnpm</span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;">f@</span><span style="color:#F78C6C;">1.0</span><span style="color:#89DDFF;">.</span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;">node_modules</span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;">f </span><span style="color:#676E95;font-style:italic;">// 解决一个项目内的代码重复引用问题</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">—</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> 硬链接 </span><span style="color:#89DDFF;">~/.</span><span style="color:#A6ACCD;">pnpm</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">store</span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;">v3</span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;">files</span><span style="color:#89DDFF;">/</span><span style="color:#F78C6C;">00</span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;">xxxxxx </span><span style="color:#676E95;font-style:italic;">// 解决项目间的包重复拷贝问题</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h3 id="平铺" tabindex="-1">平铺 <a class="header-anchor" href="#平铺" aria-label="Permalink to &quot;平铺&quot;">​</a></h3><p>pnpm 包的依赖项与依赖包的位置位于同一目录级别：f 这个依赖的内部相关依赖会被平铺到 .pnpm/f@1.0.0/node_modules/ 这个目录下面，而不是 .pnpm/f@1.0.0/node_modules/f/node_modules/</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">node_modules</span></span>
<span class="line"><span style="color:#A6ACCD;">├── f </span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">./.</span><span style="color:#A6ACCD;">pnpm</span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;">f@</span><span style="color:#F78C6C;">1.0</span><span style="color:#89DDFF;">.</span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;">node_modules</span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;">f</span></span>
<span class="line"><span style="color:#A6ACCD;">└── </span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">pnpm</span></span>
<span class="line"><span style="color:#A6ACCD;">       ├── b@</span><span style="color:#F78C6C;">1.0</span><span style="color:#89DDFF;">.</span><span style="color:#F78C6C;">0</span></span>
<span class="line"><span style="color:#A6ACCD;">       │    └── node_modules</span></span>
<span class="line"><span style="color:#A6ACCD;">       │          └── b </span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">store</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">/b</span></span>
<span class="line"><span style="color:#A6ACCD;">       └── f@1.0.0</span></span>
<span class="line"><span style="color:#A6ACCD;">             └── node_modules</span></span>
<span class="line"><span style="color:#A6ACCD;">                   ├── f -&gt; </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">store</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">/f</span></span>
<span class="line"><span style="color:#A6ACCD;">                   └── b -&gt; ../../b@1.0.0/node_modules/b</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>这个平铺的结构使得所有被提升的包都可以访问。不但保留了包之间的相互隔离，而且避免了创建的嵌套 node_modules 引起的长路径问题。</p>`,39),o=[e];function r(t,c,i,C,D,y){return n(),a("div",null,o)}const A=s(p,[["render",r]]);export{d as __pageData,A as default};
