import{_ as s,v as a,b as e,R as n}from"./chunks/framework.caa0fbaf.js";const b=JSON.parse('{"title":"Node模块查找策略","description":"","frontmatter":{},"headers":[],"relativePath":"1-前端开发/5-Node/4-模块查找策略.md","filePath":"1-前端开发/5-Node/4-模块查找策略.md","lastUpdated":1696986769000}'),l={name:"1-前端开发/5-Node/4-模块查找策略.md"},o=n(`<h1 id="node模块查找策略" tabindex="-1">Node模块查找策略 <a class="header-anchor" href="#node模块查找策略" aria-label="Permalink to &quot;Node模块查找策略&quot;">​</a></h1><p>前端中很多技术都涉及了Node的模块查找方式，例如TS、WebPack、RollUp等。</p><h2 id="是什么" tabindex="-1">是什么？ <a class="header-anchor" href="#是什么" aria-label="Permalink to &quot;是什么？&quot;">​</a></h2><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">require</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">./a.js</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 或者</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> a </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">./a.js</span><span style="color:#89DDFF;">&#39;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>Node的模块查找策略就是通过我们的路径（相对或者绝对）来帮助我们找到对应的模块，但是其中的细节也是很多的， 例如第三方（node_modules中的模块）、内置模块（fs、http等）。</p><h2 id="查找方式" tabindex="-1">查找方式 <a class="header-anchor" href="#查找方式" aria-label="Permalink to &quot;查找方式&quot;">​</a></h2><h3 id="文件查找" tabindex="-1">文件查找 <a class="header-anchor" href="#文件查找" aria-label="Permalink to &quot;文件查找&quot;">​</a></h3><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> a </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">./a.js</span><span style="color:#89DDFF;">&#39;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>直接查找路径对应的文件，例如<code>./a</code>，那么就会去判断a是否存在，如果a不存在，那么再去查找a.js和a.json是否存在。 如果上述流程之后，仍然没有找到a文件，那么就会进行文件夹方式查找。</p><h3 id="文件夹查找" tabindex="-1">文件夹查找 <a class="header-anchor" href="#文件夹查找" aria-label="Permalink to &quot;文件夹查找&quot;">​</a></h3><p><code>./a</code>如果没有找到对应的文件，那么就会进入a文件夹（如果存在a文件夹）。</p><ol><li>首先判断文件夹根目录下，是否存在<code>pakage.json</code>文件，且包含main字段，则进入字段对应的文件。</li><li>如果没有匹配成功，那么就会寻找根目录下是否存在index.js或者index.json。</li></ol><h3 id="内置模块" tabindex="-1">内置模块 <a class="header-anchor" href="#内置模块" aria-label="Permalink to &quot;内置模块&quot;">​</a></h3><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> a </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">a</span><span style="color:#89DDFF;">&#39;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>如果路径不是相对或者绝对路径，例如<code>&#39;a&#39;</code>，那么首先判断是否是内置模块，如果不是，则去第三方模块找。</p><h3 id="第三方模块" tabindex="-1">第三方模块 <a class="header-anchor" href="#第三方模块" aria-label="Permalink to &quot;第三方模块&quot;">​</a></h3><p>如果导入的模块不是nodejs的内置模块，如fs（文件读写模块），path（路径模块），http（服务器模块），也不是以/，…/ 或者./ 开头的本地模块，而是第三方模块（通过npm下载的模块）。</p><p>判断当前目录下是否存在node_modules文件夹，且是否包含a文件，如果没有，则依次向上层目录寻找node_modules文件， 一直找到全局 node_modules 目录。</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">/root/home/user/bottomBar/node_modules/bar.js</span></span>
<span class="line"><span style="color:#FFCB6B;">/root/home/user/node_modules/bar.js</span></span>
<span class="line"><span style="color:#FFCB6B;">/home/node_modules/bar.js</span></span>
<span class="line"><span style="color:#FFCB6B;">/root/node_modules/bar.js</span></span>
<span class="line"><span style="color:#FFCB6B;">/node_modules/bar.js</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>并且在node_modules中查找的方式，也是<code>文件查找-&gt;文件夹查找</code>的方式。</p>`,20),p=[o];function t(r,i,c,d,m,u){return a(),e("div",null,p)}const y=s(l,[["render",t]]);export{b as __pageData,y as default};
