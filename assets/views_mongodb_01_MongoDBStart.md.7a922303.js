import{_ as o,v as n,b as t,R as a}from"./chunks/framework.caa0fbaf.js";const b=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[{"level":2,"title":"mongodb入门","slug":"mongodb入门","link":"#mongodb入门","children":[]},{"level":2,"title":"MongoDB相关概念","slug":"mongodb相关概念","link":"#mongodb相关概念","children":[]}],"relativePath":"views/mongodb/01_MongoDBStart.md","filePath":"views/mongodb/01_MongoDBStart.md","lastUpdated":1695563543000}'),e={name:"views/mongodb/01_MongoDBStart.md"},r=a('<h2 id="mongodb入门" tabindex="-1">mongodb入门 <a class="header-anchor" href="#mongodb入门" aria-label="Permalink to &quot;mongodb入门&quot;">​</a></h2><p><img src="https://s1.ax1x.com/2023/09/12/pPgf8jH.png" alt="pPgf8jH.png"></p><h2 id="mongodb相关概念" tabindex="-1">MongoDB相关概念 <a class="header-anchor" href="#mongodb相关概念" aria-label="Permalink to &quot;MongoDB相关概念&quot;">​</a></h2><p>传统的关系型数据库 (比如 MySQL), 在数据操作的”三高”需求以及对应的 Web 2.0 网站需求面前, 会有”力不从心”的感觉 所谓的三高需求: 高并发, 高性能, 高可用, 简称三高</p><p>High Performance: 对数据库的高并发读写的要求 High Storage: 对海量数据的高效率存储和访问的需求 High Scalability &amp;&amp; High Available: 对数据的高扩展性和高可用性的需求</p><p>而 MongoDB 可以应对三高需求 具体的应用场景:</p><p>社交场景, 使用 MongoDB 存储用户信息, 以及用户发表的朋友圈信息, 通过地理位置索引实现附近的人, 地点等功能. 游戏场景, 使用 MongoDB 存储游戏用户信息, 用户的装备, 积分等直接以内嵌文档的形式存储, 方便查询, 高效率存储和访问. 物流场景, 使用 MongoDB 存储订单信息, 订单状态在运送过程中会不断更新, 以 MongoDB 内嵌数组的形式来存储, 一次查询就能将订单所有的变更读取出来. 物联网场景, 使用 MongoDB 存储所有接入的智能设备信息, 以及设备汇报的日志信息, 并对这些信息进行多维度的分析. 视频直播, 使用 MongoDB 存储用户信息, 点赞互动信息等.</p><p>这些应用场景中, 数据操作方面的共同点有:</p><p>数据量大 写入操作频繁 价值较低的数据, 对事务性要求不高</p><p>对于这样的数据, 更适合用 MongoDB 来实现数据存储</p><p>作者：跟着大佬冲冲冲 链接：<a href="https://juejin.cn/post/7126746699527094303" target="_blank" rel="noreferrer">https://juejin.cn/post/7126746699527094303</a> 来源：稀土掘金 著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p>',11),g=[r];function s(p,i,d,l,m,h){return n(),t("div",null,g)}const _=o(e,[["render",s]]);export{b as __pageData,_ as default};
